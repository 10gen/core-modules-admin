<%
core.ext.pluck();
core.io.marshal();
core.io.encode.json();
core.content.html();
core.content.regexp();

var collection;
// ignore internal transient variables
var ignore= { _ns:1, _save:1, _update:1 };

// Table display options
var rowsPerPage = (request.rowsPerPage) ? parseInt(request.rowsPerPage) : 100;
var currentPage = (request.currentPage) ? parseInt(request.currentPage) : 1;
var totalNumPages;

/* get sort obj */
var mySort = {};
if(request.sortcol && request.sortcol != "_id") {
    mySort[request.sortcol] = parseInt(request.sortdir);
}

// Print validation information
if(request.action == "validation") {
    if(request.ns == "") {
        print("No table chosen.");
        return;
    }

    var x = db[request.ns].validate();
    print(x.result && x.result ? x.result : x.errmsg);
    return;
}

// Return one row (row edit uses this)
if(request.ns && request.id) {
    collection = db[request.ns.substring( request.ns.indexOf('.')+1 )];
    x = collection.findOne({ _id : request.id });
    if(!x) {
        print("-1");
        return;
    }

    var getObjTypes = function(x) {
        var type = {};
        for(var i in x) {
            if(x[i] == null)
                type[i] = null;
            else if( x[i] instanceof Date)
                type[i] = "Date";
            else if(typeof x[i] == "object")
                type[i] = getObjTypes(x[i]);
            else if(i != "_id" && !ignore[i])
                type[i] = typeof x[i];
        }
        return type;
    }

    myObj = {};
    myObj.val = x;
    myObj.type = getObjTypes(x);
    print(tojson_u(myObj));
    return;
}

var top = request.ns == null;
var rows;
var max = (request.all) ? rows.length+1 : top?1000:(request.max ? parseInt(request.max) : 100);


/* ------------------------------------------------------
   get the paging info and only return the necessary rows
   ------------------------------------------------------ */


// dbprofile
if(request.action == "searchprofile") {
    var searchObj = {};
    var dateStart, dateEnd;
    if(request.time_from) {
        var t1 = request.time_from, t2 = request.time_to;
        dateStart = new Date(t1.substring(0,4), t1.substring(5,7), t1.substring(8,10), t1.substring(11,13), t1.substring(14,16), t1.substring(17,19));
        dateEnd = new Date(t2.substring(0,4), t2.substring(5,7), t2.substring(8,10), t2.substring(11,13), t2.substring(14,16), t2.substring(17,19));
        searchObj.ts = { $gte: dateStart, $lte: dateEnd };
    }
    if(request.ms_from) {
        searchObj.millis = { $gte : parseInt(request.ms_from), $lte : parseInt(request.ms_to) };
    }
    if(request.re) {
        searchObj.info = new RegExp(content.RegExp.escape(request.re), "i");
    }
    if(request.record_type && request.record_type != "all") {
        searchObj.info = new RegExp("^"+request.record_type+".*");
    }

    rows = db.system.profile.find( searchObj ).limit(100).toArray();
    top = false;
}
// dbview
else if(request.action == "search" || request.action == "userssearch" || request.action == "filessearch") {
    collection = request.ns ? db[request.ns.substring( request.ns.indexOf('.')+1 )] : db["system.namespaces"];
    var searchobj = {};
    if(top) {
        q = "";
        if(request.name)
            q = request.name;
        if(request.index)
            q = q+"\\$.*"+request.index;
        var query = new RegExp(".*"+content.RegExp.escape(q)+".*", "i");
        searchobj["name"] = query;
    }

    for(q in request) {
        if(!request[q]) continue;
        if(q.indexOf("search") == 0 && q.length > 6) {
            var query = new RegExp(".*"+content.RegExp.escape(request[q])+".*", "i");
            searchobj[q.substring(6)] = query;
        }
    }

    if(request.action == "userssearch" && searchobj['admin']){
        if(request.admin == 'yes'){
            searchobj['$where'] = function(){
                return obj.permissions && obj.permissions.contains('admin');
            };
            delete searchobj['admin'];
        }
        if(request.admin == 'no'){
            searchobj['$where'] = function(){
                return (obj.permissions == null) || !(obj.permissions.contains('admin'));
            };
            delete searchobj['admin'];
        }
    }

    var start = (currentPage - 1)*rowsPerPage;
    if(top)
        rows = collection.find(searchobj).sort(mySort).skip(start).limit(rowsPerPage).toArray();
    else
        rows = collection.find(searchobj).sort(mySort).skip(start).limit(rowsPerPage).toArray();
}
else if(request.action == "eval") {
    try {
        var rows = scope.eval(request.cmd);
        if(!rows)
            return "No results.";
        rows = rows.toArray();
        top = false;
    }
    catch(e) {
        print( "Exception: "+e);
        return;
    }
}
else {
    var collection;
    if( top ) {
        collection = db["system.namespaces"];
        collection.ensureIndex( {name:true} );
        rows = collection.find().sort( { name : 1 } ).toArray();
    }
    else {
        collection = db[request.ns.substring( request.ns.indexOf('.')+1 )]; // remove db name from the str

        var start = (currentPage - 1)*rowsPerPage;
        rows = collection.find().skip(start).limit(rowsPerPage).toArray();
    }
}
/* if this is a log, the rows should be in the opposite order */
if(request.reverse)
    rows.reverse();

if(top) {
    var numrows = 0;
    for(var i=0; i<rows.length; i++) {
        if(rows[i].name.indexOf("$") == -1) {
            numrows++;
        }
    }
    totalNumPages = Math.floor((numrows - 1) / rowsPerPage ) + 1;
}
else {
    if(request.ns)
        var numrows = db[request.ns.substring(request.ns.indexOf(".")+1)].count(searchobj);
    else
        numrows = rows.length;
    totalNumPages = Math.floor((numrows - 1) / rowsPerPage) + 1;
}

if(currentPage > totalNumPages && totalNumPages > 0)
    currentPage = totalNumPages;

var start = (currentPage - 1)*rowsPerPage;


/* if this is all collections, indices will be listed as rows. */
if(top) {
    var urow = [];
    tableCount = -1;
    for(var i=0; i<rows.length; i++) {
        if(rows[i].name.indexOf("$") == -1) {
            tableCount++;
        }
        if(start <= tableCount && tableCount <= start+rowsPerPage)
            urow.push(rows[i]);
    }
    rows = urow;
}


var dbTable = { rows: [] };
dbTable.totalNumPages = totalNumPages;
dbTable.currentPage = currentPage;
dbTable.rowsPerPage = rowsPerPage;


/* --------------
   get the fields
   -------------- */
var fields = [];
var f = {};
for( var i=0; i < rows.length; i++ ) {
    for( var e in rows[i] ) {
        if( !f[e] ) f[e] = 1;
    }
}
if(top) { fields.push("name"); fields.push("index"); }
for( var i in f) {
    fields.push(i);
}
fields.sort();


/* ------------------
   generate the table
   ------------------ */
if( top ) {
    var k = 0;
    for( var i=0; i < rows.length; i++ ) {
        var j=0;
        dbTable.rows[k] = {};

        var obj=rows[i];
        var currentRow = obj;
        dbTable.rows[k].name = obj.name;
        dbTable.rows[k].index = "";
        while(i<rows.length-1 && rows[i+1].name.indexOf("$") > 0) {
            obj = rows[++i];
            var idx=top ? obj.name.indexOf("$") : -1;
            if( obj.name && idx>=0 ) {
	        var idxname = obj.name.substring(idx+1);
                dbTable.rows[k].index += idxname+" ";
	        var idxobj = db.system.indexes.findOne( { name: idxname, ns: obj.name.substring(0,idx-1) } );
	        dbTable.rows[k].index += (idxobj?tojson(idxobj.key):"null") + "<br />";
            }
        }
        dbTable.rows[k].capped = (currentRow.capped) ? currentRow.capped : "";
        k++;
    }
}
else
    dbTable.rows = rows;


/* Formatting */

var fcount = 0;

if(top) {
    var th = [ {name : "name", className: "sort-down", heading: "NAME"}, {heading: "INDICES" }, {name : "capped", className: "center", heading: "CAPPED"}, {className: "center", heading: "STATS"}, {className: "center", heading: "DROP COLLECTION" } ];
}
else if(request.action == "userssearch"){
    var th = [ {name: "name", heading: "NAME"}, {name: "email", heading: "EMAIL"}, {name: "admin", heading: "ADMIN"} ];
}
else if(request.action == "filessearch") {
    var th = [{name: "filename", heading: "Filename"}, {name: "uploadDate", heading: "Upload Date"}, {name: "contentType", heading: "Content Type"}, {name: "length", heading: "Size"}, {heading: "Delete"}];
}
else if(request.pagename == "cron") {
    var th = [{name: "name", heading: "Job Name"}, {name: "url", heading: "URL"}, {name: "xminutes", heading: "Interval"}, {name: "lastRun", heading: "Last Run"}, {name: "Delete", heading: "Delete"}];
}
else {
    var th = [];
    if(request.action != "searchprofile" && "_id" in f) th.push({"name" : "_id", heading: "_id", className: "sort-up" });
    for(var i in fields) {
        if(ignore[fields[i]] || fields[i] == "_id") continue;
        th.push({"name" : fields[i], heading: fields[i], className: "" });
    }
    if(request.action != "searchprofile" && dbTable.rows.length > 0) th.push({heading: "Delete", className: "center", name: "Delete", searchable: false });

    idFormatter = function(oData) {
        return '<a><span style="cursor:pointer" onclick="editRow(\''+oData+'\')">'+oData+'</span></a>';
    }

    deleteBtnFormatter = function(id, field) {
        if(field)
            return '<img src="NOCDN/admin/assets/img/button_delete_on_white.gif" onclick="deleteRow(\''+id.getTime()+'\', \''+field+'\')" />';
        else
            return '<img src="NOCDN/admin/assets/img/button_delete_on_white.gif" onclick="deleteRow(\''+id+'\')" />';
    }

    var objcount = 0;
    function printObj(cursor, field) {
        if(!cursor || !cursor[field]) return "";
        var text = "";

        if(cursor[field] == null || typeof cursor[field] == "native" || typeof cursor[field] == "function") {
            text += '<div><label class="obj">'+field+':</label><span class="obj">'+cursor[field]+"</span></div>";
        }
        else if(typeof cursor[field] == "boolean" || typeof cursor[field] == "string" || typeof cursor[field] == "number") {
            text += '<div><label class="obj">'+field+':</label><span class="obj">'+content.HTML.escape(cursor[field])+'</span></div>';
        } else if(typeof cursor[field] == "object") {
            var name;
            var desc;
            if(cursor[field] instanceof Date) {
                name = field;
                desc = cursor[field].toString();
            }
            else if(cursor[field] instanceof Array) {
                name = field;
                desc = "["+cursor[field].length+"]";
            }
            else {
                name = field;
                desc = "{...}";
            }
            text += "<div class=\"parent\" onclick=\"showObj('o"+objcount+"')\"><label class=\"obj\">"+name+"</label><span class=\"obj\">"+desc+"</span></div><div class=\"obj\" id=\"o"+objcount+"\">";
            var tempobj = objcount;
            objcount++;
            for(var q in cursor[field]) {
                text += printObj(cursor[field], q);
            }
            text += "<div><input type='button' onclick='hideObj(\"o"+tempobj+"\")' class='button' value='close'></div></div>";
        } else {
            text += '<div><label class="obj">undef:</label><span class="obj">'+typeof cursor[field]+"</span></div>";
        }
        return text;
    }


    strFormatter = function(obj, field) {
        if(field in obj && !obj[field]) {
            return '<div class="nullfield">null</div>';
        }
        else if (!obj[field]) {
            return '<div class="nullfield"><b>-</b></div>';
        }
        else if (typeof obj[field] == "native" || typeof obj[field] == "function" || typeof obj[field] == "objectid") {
            return obj[field];
        }
        else if(typeof obj[field] == "object" || obj[field].toString().length >= 20) {
            var subobj = obj[field];
            var str = "";
            var fullText = '<div class="fullText" id="fulltext'+fcount+'">';
            fcount++;

            if (subobj instanceof Date) {
                fullText += subobj.toString();
                str = '<span class="partialText" style="cursor:default">'+subobj.toString().substring(0, 18)+"...</span>";
            }
            else if (typeof subobj == "object") {
                for(var q in subobj)
                    fullText += printObj(subobj, q);
                str = '<span class="partialText" style="cursor:default">(Object)</span>';
            }
            else {
                fullText += content.HTML.escape(subobj);
                str = '<span class="partialText" style="cursor:default">'+content.HTML.escape(subobj.substring(0, 18))+"...</span>";
            }
            fullText += '</div>';
            return str+fullText;
        }
        else
            return obj[field];
    }
}

dbTable.top = top;
if(top) {
    dbTable.idxes = {name: "name"};
    for(var i in dbTable.rows) {
        dbTable.rows[i].url = "dbview?ns="+dbTable.rows[i].name;
        dbTable.rows[i].name = dbTable.rows[i].name.substring( dbTable.rows[i].name.indexOf('.')+1 );
    }
}
else if(request.action == "userssearch"){
    for(var i = 0; i < dbTable.rows.length; ++i){
        var u = dbTable.rows[i];
        if(u.permissions && u.permissions.contains('admin')) u.admin = "yes";
        else u.admin = "no";
        u.name = '<a href="user?_id='+u._id+'">'+u.name+'</a>';
    }
    if(dbTable.rows.length == 0) {
        dbTable.rows = [{name: "No users found.", email: "", admin: ""}];
    }
    dbTable.idxes = {};
}
else if(request.action == "filessearch") {
    for(var i=0; i<dbTable.rows.length; i++) {
        dbTable.rows[i].Delete = '<img src="NOCDN/admin/assets/img/button_delete_on_white.gif" onclick="deleteFile(\''+dbTable.rows[i]._id+'\', \''+dbTable.rows[i].filename+'\')" />';
        dbTable.rows[i].filename = '<a target="_blank" href="/~~/f?id='+dbTable.rows[i]._id+'" style="cursor: pointer">'+dbTable.rows[i].filename+'</a>';
    }
    dbTable.idxes = {};
}
else if(request.pagename == "cron") {
    for(var i=0; i<dbTable.rows.length; i++) {
        dbTable.rows[i].Delete = '<img src="NOCDN/admin/assets/img/button_delete_on_white.gif" onclick="deleteJob(\''+dbTable.rows[i]._id+'\')" />';
        dbTable.rows[i].name = '<a onclick="editCron(\''+dbTable.rows[i]._id+'\')">'+dbTable.rows[i].name+'</a>';
    }
    dbTable.idxes = {};
}
else if(request.action != "searchprofile") {
    // get any indices for the collection
    var idxObj = {};
    idxObj.name = new RegExp(request.ns+"\\.\\$");
    var idxes = db["system.namespaces"].find(idxObj).toArray();
    dbTable.idxes = {};
    // indices are of the form namespace.collection.specifier.$idxname_1, and we only want idxname
    for(var i in idxes) {
        idxes[i] = idxes[i].name.substring(idxes[i].name.indexOf("$")+1);
        // some names might have underscores in them (e.g., _system) and indices can have multiple fields, so this is done seperately
        dbTable.idxes[idxes[i].substring(0, idxes[i].indexOf("_"))] = 1;
    }

    if(!("_id" in f)) {
        var uniqueKey = db.system.indexes.findOne({ns: request.ns});
        // if there is no index on the collection, there is no way to uniquely identify elements
        // so get rid of the delete button
        if(!uniqueKey){
            if(th.length)
                th.pop();
        }
        else {
            var keyArr = uniqueKey.key;
            keyArr = Object.keys(keyArr);
            uniqueKey = keyArr[0];
        }
    }
    for(var i in dbTable.rows) {
        if("_id" in f) {
            dbTable.rows[i].id = "";
            dbTable.rows[i].Delete = deleteBtnFormatter(dbTable.rows[i]._id);
        }
        else {
            // if the collection doesn't have an _id field (like the _system stuff), we need to find an index and use that, instead
            dbTable.rows[i].Delete = deleteBtnFormatter(new Date(rows[i][uniqueKey]), uniqueKey);
        }
        for(var field in th) {
            if(th[field].name == "_id") dbTable.rows[i].id = idFormatter(dbTable.rows[i]._id);
            else if(field < th.length-1) dbTable.rows[i][th[field].name] = strFormatter(dbTable.rows[i], th[field].name);
        }
    }
}
else { //format date for dbprofile
    for(var i in dbTable.rows) {
        dbTable.rows[i].ts = dbTable.rows[i].ts.format("E MMM dd, yyyy HH:mm:ss");
    }
}

var page = [];
var pageStart = Math.max(1, dbTable.currentPage-2);
var pageEnd = Math.min(parseInt(dbTable.totalNumPages), parseInt(dbTable.currentPage)+2);

for(var i=pageStart; i<=pageEnd; i++) {
    if(dbTable.currentPage == i) {
        if(i < 10)
            page.push({ name: i, className: "active" });
        else
            page.push({ name: i, className: "modactive" });
    }
    else {
        if(i < 10)
            page.push({ name: i, className: "" });
        else
            page.push({ name: i, className: "mod" });
    }
}

var prevPage = (dbTable.currentPage == 1) ? null : dbTable.currentPage - 1;
var nextPage = (dbTable.currentPage == dbTable.totalNumPages) ? null : parseInt(dbTable.currentPage) + 1;
dbTable.colspan = th.length;

if(request.action == "searchprofile") {
    if(dbTable.rows.length == 0) {
        dbTable.colspan = 3;
    }
    adminRoot.pieces.tableHeader({search: false, th: th, colspan: dbTable.colspan});
    adminRoot.pieces.dbprofileBody({table: dbTable, th: th, colspan: colspan});
}
else if(request.action == "userssearch"){
    adminRoot.pieces.usersHeader({search: true, th: th, colspan: dbTable.colspan});
    adminRoot.pieces.dbviewBody({table: dbTable, th: th, top: dbTable.top});
}
else if(request.action == "filessearch") {
    var filefields = ["filename", "uploadDate", "contentType", "length"];
    adminRoot.pieces.tableHeader({search: true, th: th, colspan: dbTable.colspan});
    adminRoot.pieces.files({th: th, table: dbTable, fields: filefields, colspan: dbTable.colspan});
}
else {
    adminRoot.pieces.tableHeader({search: true, th: th, colspan: dbTable.colspan});
    adminRoot.pieces.dbviewBody({table: dbTable, th: th, top: dbTable.top});
}
adminRoot.pieces.tableFooter({page: page, prevPage: prevPage, nextPage: nextPage, colspan: dbTable.colspan, totalNumPages: dbTable.totalNumPages});

%>
