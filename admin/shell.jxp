
<div style="text-align:center;" class="yui-skin-sam">
     Shell (do not refresh page or anything crazy like that)<br>
     <div id="console" class="transcript"></div>
     <div id="treeview"></div>
     <script type="text/javascript" src="/~~/ui/js/compat.js"></script>
     <script type="text/javascript" src="/@@/yui/2.5.1/yuiloader/yuiloader-beta.js"></script>
     <script type="text/javascript">
       var loader = new YAHOO.util.YUILoader();
       loader.insert({
           require: ['fonts', 'dragdrop', 'logger', 'autocomplete', 'treeview'],
           base: '/@@/yui/2.5.1/',
           onSuccess: function(loader) {
               objectList = [];
               loader.objectTreeView = new YAHOO.widget.TreeView("treeview");
               loader.objectNodes = [];
               this.myLogReader = new YAHOO.widget.LogReader('console', {newestOnTop: false, footerEnabled: false});
               var sources = this.myLogReader.getSources();
               this.myLogReader.hideSource("global");
               this.myLogReader.hideSource("LogReader");
               this.myLogReader.formatMsg = function(msg){
                   if(msg.category == "user"){
                       return "js&gt; <a class=\"usercmd\">" + msg.msg + "</a><br/>";
                   }
                   if(msg.category == "response"){
                       var obj = eval("(" + msg.msg + ")");
                       if(typeof obj == "object"){
                           var i = objectList.push(obj);
                           var treenode = new YAHOO.widget.TextNode("Object " + i,
                               loader.objectTreeView.getRoot(), false);
                           populateTree(treenode, obj);
                           loader.objectNodes.push(treenode);
                           loader.objectTreeView.draw();
                           var s = "<span class=\"response\" onclick=\"expandObject("+i+")\">object "+i+"</span><br/>";
                           return s;
                       }
                       else
                           return "<span class=\"response\">" + msg.msg + "</span><br/>";
                   }
               };


               pastCommands = new Array();
               historyAry = new Array();

               // Install this handler before the autocompleter because it will
               // grab up/down key events
               YAHOO.util.Event.addListener(document.getElementById('commandac'),"keydown",blockYUIParen);
               YAHOO.util.Event.addListener(document.getElementById('commandac'),"keypress",blockYUIParen);
               YAHOO.util.Event.addListener(document.getElementById('commandac'),"keyup",blockYUIParen);

               YAHOO.util.Event.addListener(document.getElementById('commandac'),"keydown",histfunc);

               // YUI autocomplete tries to autocomplete even if there's been
               // an intervening "Enter" and the input field has been cleared.
               // We block this by keeping a "lastSent"
               // variable with the last complete command we've sent and
               // if we get a query for that exact command, we replace it
               // with a gibberish !!!!!! query.
               YAHOO.util.Event.addListener(document.getElementById('commandac'),"keydown",function(e){
                   if(e.keyCode == 13){
                       window.lastSent = encodeURIComponent(document.getElementById('commandac').value);
                   }
               });


               // Set up autocompletion stuff
               YAHOO.ACJSArray = new function(){ // Object construction
                   this.oACDS = new YAHOO.widget.DS_JSArray(pastCommands);
                   this.oAutoComp = new YAHOO.widget.AutoComplete("commandac", "commandcontainer", this.oACDS);
                   this.oAutoComp.prehighlightClassName = "yui-ac-prehighlight";
                   this.oAutoComp.typeAhead = true;
                   this.oAutoComp.useShadow = true;
                   this.oAutoComp.minQueryLength = 1;
                   //this.oAutoComp.queryDelay = 0;
                   this.oAutoComp.doBeforeSendQuery = function(q){
                       if(q == window.lastSent){
                           // We only want to throw this away once.
                           // Otherwise the user might type in the exact query
                           // to try to complete a longer query..
                           window.lastSent = "";
                           return "!!!!!!";
                       }
                       return q;
                   };
               };
           }
       });

var blockYUIParen = function ( e ) {
    var key = e.keyCode || e.which;
    if(e.shiftKey){
        // In Konqueror and Safari, the keys for lparen and up-arrow generate
        // the same keycode. Because of this, YUI blocks lparen.
        // This is no good, so we block YUI's block by sabotaging the event's
        // preventDefault method.
        e.preventDefault = function(){};
        return;
    }
};

var histfunc = function( e ) {
    if(YAHOO.ACJSArray.oAutoComp.isContainerOpen()) return;
    var key = e.keyCode || e.which;
    var cmd = document.getElementById("commandac");
    var setcmd = function () {
        if ( arguments.length ) {
            cmd.value = arguments[0];
        }
        else {
            cmd.value = pastCommands[historyAry[historyAry.length + historyLocation]];
        }
    }
    if( key == 38 ) { // up arrow
        historyLocation -= 1;
        if (historyLocation < -historyAry.length){
            historyLocation = -historyAry.length;
        }
        else {
            setcmd();
        }
    }
    else if( key == 40 ) { // down arrow
        historyLocation += 1;
        if (historyLocation >= 0){
            historyLocation = 0;
            setcmd("");
        }
        else {
            setcmd();
        }
    }
};
     </script>
     <form class="command" onSubmit="return doRun('commandac');">
       Command: <div id="commandautocomplete"><input id="commandac" size=70><div id="commandcontainer"></div></div><input type="submit" value="run">
    </form>
</div>

<script>
var count = 0;
var objcount = 0;
function Text(cursor, field){
    return "<input type=\"text\" id=\"txt"+count+"\" value=\""+cursor[field]+"\" onblur=\"rewrite('"+cursor._id+"','"+field+"','"+typeof cursor[field]+"','"+count+"')\">";
}
function Check(cursor, field) {
    return(cursor[field] ? "<input type=\"checkbox\" onclick=\"toggle('"+cursor._id+"','"+field+"',false)\" checked>" : "<input type=\"checkbox\" onclick=\"toggle('"+cursor._id+"','"+field+"',true)\">");
}

function populateTree(treenode, obj) {
    for(var field in obj){
        s = field + ": ";
        if(typeof obj[field] == "boolean") {
            s += obj[field];
        }
        else if(typeof obj[field] == "string") {
            s += '"' + obj[field] + '"';
        }
        else if(typeof obj[field] == "number") {
            s += obj[field];
        }
        else if(typeof obj[field] == "object") {
            s += "Object";
        }
        else {
            s += (typeof obj[field]);
        }

        var tmpNode = new YAHOO.widget.TextNode(s, treenode, false);
        if(typeof obj[field] == "object") {
            populateTree(tmpNode, obj[field]);
        }
    }
}

function expandObj(i){
    loader.objectNodes[i].expand();
}

    indexOf = function(ary, v){
        for(var i=0; i<ary.length; ++i){
            if(ary[i] == v)
                return i;
        }
        return -1;
    };
lastIndexOf = function(ary, v){
    for(var i=ary.length-1; i>=0; --i){
        if(ary[i] == v)
            return i;
    }
    return -1;
};
    shellId = "shell-" + Math.random();
    var historyLocation = 0;
    function doRun(el){
        var command = document.getElementById( el );
        var usr = command.value;
        command.value = "";
        if(indexOf(pastCommands, usr) == -1){
            pastCommands.push(usr);
        }
        if (historyAry.length == 0 || lastIndexOf(historyAry, indexOf(pastCommands, usr)) != historyAry.length-1) {
            historyAry.push(indexOf(pastCommands,usr));
        }
        historyLocation = 0;

        YAHOO.log(usr, "user", "shell");
        var url = "/admin/_shell?id=" + shellId + "&command=" + escape( usr ).replace( /\+/ , "%2B" );

        var res = loadDocSync( url );
        res = res.replace( /(^\s+|\s+$)/g , "" );
        YAHOO.log(res, "response", "shell");

        return false;
    }

</script>
