<%
core.ext.pluck();
core.io.marshal();
core.io.encode.json();
core.db.db();
core.content.html();
core.content.html();

var collection;
// ignore internal transient variables
var ignore= { _ns:1, _save:1, _update:1 };


// Print validation information
if(request.action == "validation") {
    if(request.ns == "") {
        print("No table chosen.");
        return;
    }

    var x = validate(request.ns.substring( request.ns.indexOf('.')+1 ));
    print(x.result ? x.result : x.errmsg);
    return;
}

// Return one row
if(request.ns && request.id) {
    collection = db[request.ns.substring( request.ns.indexOf('.')+1 )];
    x = collection.findOne({ _id : request.id });
    if(!x) {
        print("-1");
        return;
    }

    var getObjTypes = function(x) {
        var type = {};
        for(var i in x) {
            if(x[i] == null)
                type[i] = null;
            else if( x[i] instanceof Date)
                type[i] = "Date";
            else if(typeof x[i] == "object")
                type[i] = getObjTypes(x[i]);
            else if(i != "_id" && !ignore[i])
                type[i] = typeof x[i];
        }
        return type;
    }

    myObj = {};
    myObj.val = x;
    myObj.type = getObjTypes(x);
    print(tojson_u(myObj));
    return;
}

var top = request.ns == null;
var rows;
var max = (request.all) ? rows.length+1 : top?1000:(request.max ? parseInt(request.max) : 100);

if(request.action == "search") {
    collection = request.ns ? db[request.ns.substring( request.ns.indexOf('.')+1 )] : db["system.namespaces"];
    var searchobj = {};
    var tempLive;
    if(top) {
        q = "";
        if(request.name)
            q = request.name;
        if(request.index)
            q = q+"\\$.*"+request.index;
        var query = new RegExp(".*"+q+".*", "i");
        searchobj["name"] = query;
    }
    for(q in request) {
        if(q == "action" || q == "ns")
            continue;
        if(top && (q == "index" || q == "name"))
            continue;

        var query = new RegExp(".*"+request[q]+".*", "i");
        searchobj[q] = query;
    }
    rows = collection.find(searchobj).sort({number: 1}).toArray();
}
else {
    collection = request.ns ? db[request.ns.substring( request.ns.indexOf('.')+1 )] : db["system.namespaces"];
    if(request.limit) {
        rows = collection.find().limit(request.limit).toArray();
    }
    else rows = collection.find().toArray();

    var collection;
    if( top ) collection = db["system.namespaces"];
    else collection = db[request.ns.substring( request.ns.indexOf('.')+1 )]; // remove db name from the str

    if( top ) {
        // we'll sort by collection name
        collection.ensureIndex( {name:true} );
    }

    rows = collection.find().sort( { name : 1 } ).toArray();
}

var objcount = 0; // unique id for each object's div
var fieldcount = 0;


var done = false;
function outp(x, id, name) {
        return (typeof x)+":"+x;
}

var fields = [];
var f = {};
for( var i=0; i < rows.length; i++ ) {
    for( var e in rows[i] ) {
        if( !f[e] ) f[e] = 1;
    }
}
if(top) { fields.push("name"); fields.push("index"); }
for( var i in f) {
    fields.push(f[i]);
}
// thresh: threshold for which we add a column to the table we generate.  so uncommon fields just go in the catchall.
/*var fields;
var thresh = rows.length < 4 ? 0 : rows.length / 2;
if( top ) {
    fields = [ 'name', 'index' ];
}
else {
    fields = [];
    var f = {};
    for( var i=0; i < rows.length; i++ ) {
        for( var e in rows[i] ) {
	    if( f[e] == null ) f[e] = 1; else  f[e]++; // count frequency
        }
    }
    for( var g in f ) {
	if( f[g] >= thresh ) fields.push(g);
    }
}*/



var dbTable = { rows: [] };
print('{ "rows" : [ ');
var k = 0;
for( var i=0; i < rows.length; i++ ) {
    var j=0;
    dbTable.rows[k] = {};

    var obj=rows[i];
    if( top ) {
        var currentRow = obj;
        dbTable.rows[k][fields[j++]] = obj.name;
        dbTable.rows[k][fields[j]] = "";
        while(i<rows.length-1 && rows[i+1].name.indexOf("$") > 0) {
            obj = rows[++i];
            var idx=top ? obj.name.indexOf("$") : -1;
            if( obj.name && idx>=0 ) {
	        var idxname = obj.name.substring(idx+1);
                dbTable.rows[k][fields[j]] += '<input type="checkbox" name="'+rows[i].name.substring(0, rows[i].name.lastIndexOf("."))+'" value="'+idxname+'" /> index '+idxname+" ";
	        var idxobj = db.system.indexes.findOne( { name: idxname, ns: obj.name.substring(0,idx-1) } );
	        dbTable.rows[k][fields[j]] += (idxobj?tojson(idxobj.key):"null") + "<br />";
            }
        }
        dbTable.rows[k].fixed = currentRow.capped;
    } else {
        for( h in f ) {
//	    if( f[h]>thresh && !ignore[h] ) {
            if( !ignore[h] ) {
                if(h == "_id"){
	            dbTable.rows[k][h] = obj[h];
                }
                else if(h in obj && obj[h] == null)
                    dbTable.rows[k][h] = null;
                else if(typeof obj[h] == "string") {
                    dbTable.rows[k][h] = content.HTML.escape_html(obj[h]); //(obj[h].length >= 20) ? obj[h].substring(0, 18)+"..." : obj[h];
                }
                else if(typeof obj[h] == "number") {
                    dbTable.rows[k][h] = obj[h] ;
                }
                else if(obj[h] instanceof Date)
                    dbTable.rows[k][h] = obj[h].toString();
                else if(h in obj)
                    dbTable.rows[k][h] = tojson_u(obj[h]);
	    }
        }
/*        var first = true;
        dbTable.rows[k].other = "";
        for( x in obj ) {
            if( f[x]<= thresh ) {
	        if( !first )
		    dbTable.rows[k].other += ", ";
	        first = false;
	        dbTable.rows[k].other = x + ": " + outp(tojson(obj[x]));
            }
        }*/
    }
    print(tojson_u(dbTable.rows[k]));
    print(",");
    k++;
}

print("] }");

%>
