<%

core.ui.chart.datetime();

function doRound( date , t ){
    if ( t == "h" )
        return date.roundHour();
    if ( t == "d" )
        return data.roundDay();
    if ( t == "w" )
        return date.roundWeek();
    if ( t == "m" )
        return date.roundMonth();
    return date.roundMinutes( 5 );
}

/**
 * @return [ { time : Date , num : Number } ... ]
*/
function mungeData( cursor , t , startTime ){
    cursor.sort( { ts : -1 } );
    
    var last = null;
    var a = [];
    
    cursor.forEach( function( z ){ 
            var n = doRound( z.ts , t );
            
            if ( ! last || ( n.getTime() != last.getTime()  ) )
                a.push( { time : n , num : 0 } );
            
            a[a.length - 1 ].num += z.num;
            last = n;
        } );

    var minutes = 5;
    if ( t == "h" )
	minutes = 60;
    else if ( t == "d" )
	minutes = 60 * 24;
    else if ( t == "w" )
	minutes = 60 * 24 * 7;
    else if ( t == "m" )
	minutes = 60 * 24 * 30;

    // convert sums to per second
    a = a.map( function( z ){
		   return { time : z.time , num : z.num / ( minutes * 60 ) };
	       } );
    
    var msDiff = minutes * 60 * 1000;

    while ( a[0].time.getTime() > ( startTime.getTime() + 5000 ) ){
        var d = new Date( a[0].time.getTime() - msDiff );
        a.unshift( { time : d , num : 0 } );
    }

    var n = [];
    for ( var i=0; i<a.length; i++ ){

	if ( i == 0 ){
	    n.push( a[i] );
	    continue;
	}
	
	var cur = a[i-1].time;
	while ( ( cur.getTime() + msDiff + 5000  ) < a[i].time.getTime() ){
	    cur = new Date( cur.getTime() + msDiff );
	    a.push( { time : cur , num : 0 } );
	}
	
	n.push( a[i] );
    }
    a = n;
    return a;
    
}

/**
 * @param limit 5 minute chunks to go back
 */
function go( type , limit , t , header ){
    var dt = new ui.chart.DateTime();
    
    var start = new Date();
    start = new Date( start.getTime() - ( limit * 5 * 60 * 1000 ) );
    start = doRound( start , t );

    data = mungeData( db._system.usage[type].find().limit( limit ) , t , start );
    data.forEach( function( z ){
		      dt.add( z.time , z.num  );
		  } );
    dt.width = 500;
    dt.height = 100;
    print( "<h3>" + ( header || type ) + "</h3>" );
    dt.print( print );
}

var types = [ "bytes_in" , "bytes_out" , "cpu_millis" , "requests" ];
function doAllTypes( limit , t ){
    types.forEach( function(z){
		       go( z , limit , t );
		   } );
    
}

%>
<table>
  <tr>
    
    <td>
      <h1>Last 36 hours</h1>
      <%  doAllTypes( 12 * 36 ); %>
    </td>

    <td>
      <h1>Last 7 days</h1>
	<%  doAllTypes( 12 * 24 * 7 , "h" ); %>
    </td>

  </tr>
</table>
