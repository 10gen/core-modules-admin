<% /**
*      Copyright (C) 2008 10gen Inc.
*
*    Licensed under the Apache License, Version 2.0 (the "License");
*    you may not use this file except in compliance with the License.
*    You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*    Unless required by applicable law or agreed to in writing, software
*    distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*    See the License for the specific language governing permissions and
*    limitations under the License.
*/ %>

<%

if(request.action == "delete") {
    var collection = db[request.ns.substring( request.ns.indexOf('.')+1 )]; // remove db name from the str
    if(request.id)
        collection.remove({_id : request.id});
    else {
        var objTBD = {};
        if(request.name == "ts") {
            objTBD.ts = new Date(request.val);
            log("request: "+request.val+" ts: "+objTBD.ts);
        }
        else if(parseInt(request.val)) {
            objTBD[request.name] = parseInt(request.val);
        }
        else
            objTBD[request.name] = request.val;

        collection.remove(objTBD);
    }
}
if ( request.action == "deletefile" ){
    var file = db._files.findOne({ _id: request._id});
    var result = "";
    if(file) {
        var chunk = [];
        var i=0;
        var tbd = file;
        var totalSize = 0;
        while(tbd.next) {
            chunk[i++] = db._chunks.findOne(tbd.next);
            tbd = tbd.next;
        }
        for(var i=chunk.length-1; i>=0; i--){
            totalSize += chunk[i].data.length();
            db._chunks.remove({_id: chunk[i]._id});
        }

        if(file.length != totalSize)
            result = "This file was corrupted -- only able to delete " + totalSize + " of the " + file.length + " bytes.";
        db._files.remove({_id: file._id});
    }
    print(result);
}
else if(request.action == "drop") {
    db[request.ns].drop();
}
else if(request.action == "dropI") {
    var idx = request.idx.split(",");
    for(var i in idx) {
        db[request.ns.substring( request.ns.indexOf('.')+1)].dropIndex(idx[i]);
    }
}
else if(request.action == "edit") {
    var collection = db[request.ns.substring( request.ns.indexOf('.')+1 )]; // remove db name from the str

    var obj = collection.findOne({ _id : request.id });

    var val;
    if(request.type == "boolean") {
        val = (request.val == "true") ? true : false;
    }
    else if(request.type == "number") {
        val = parseInt(request.val);
    }
    else { // string
        val = request.val;
    }

    var path = request.path.split(",");
    switch(path.length) {
    case 1:
        obj[path[0]] = val;
        break;
    case 2:
        obj[path[0]][path[1]] = val;
        break;
    case 3:
        obj[path[0]][path[1]][path[2]] = val;
        break;
    case 4:
        obj[path[0]][path[1]][path[2]][path[3]] = val;
        break;
    case 5:
        obj[path[0]][path[1]][path[2]][path[3]][path[4]] = val;
        break;
    default:
        print(path.length);
        return;
    }

    collection.save(obj);
}
%>
