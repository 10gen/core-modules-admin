<%
/* dbview.jxp - database content viewer utility */
head.push('<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/yuiloader/yuiloader-beta-min.js" ></script>');

core.content.html();

var objcount = 0; // unique id for each object's div
var fieldcount = 0;

function printEditableField(x, id, path) {
    if(typeof x == "string") {
        if( x.length<=20 )
            x = content.HTML.escape_html(x);
        else {
	    x = content.HTML.escape_html(x)
            // put extra text in a hidden div
            print('<div id="extra'+fieldcount+'" style="display: none;">'+x+'</div>');
            x = x.substring(0,18)+"...";
        }
    }

    print('<span class="obj" id="f'+fieldcount+'" onclick=\'editField('+fieldcount+', "'+(typeof x)+'","'+id+'","'+path+'")\'>'+x+"</span>");
    fieldcount++;
}

function printObj(cursor, field, id, path) {
    if(!cursor || !cursor[field]) return;

    if(cursor[field] == null || typeof cursor[field] == "native" || typeof cursor[field] == "function") {
        print('<div><label class="obj">'+field+':</label><span class="obj">'+cursor[field]+"</span></div>");
    }
    else if(typeof cursor[field] == "boolean" || typeof cursor[field] == "string" || typeof cursor[field] == "number") {
        print('<div><label class="obj">'+field+':</label>');
        printEditableField(cursor[field], id, path);
        print('</div>');
    } else if(typeof cursor[field] == "object") {
        var name;
        var desc;
        if(cursor[field] instanceof Date) {
            name = "Date";
            desc = cursor[field].toString();
        }
        else if(cursor[field] instanceof Array) {
            name = "Array";
            desc = "["+cursor[field].length+"]";
        }
        else {
            name = "Object";
            desc = field;
        }
        print("<div class=\"parent\" onclick=\"showObj('o"+objcount+"')\"><label class=\"obj\">"+name+"</label><span class=\"obj\">"+desc+"</span></div><div class=\"obj\" id=\"o"+objcount+"\">");
        var tempobj = objcount;
        objcount++;
        for(var name in cursor[field]) {
            path.push(name);
            printObj(cursor[field], name, id, path);
            path.pop();
        }
        print("<div><input type='button' onclick='hideObj(\"o"+tempobj+"\")' value='close'></div></div>");
    } else {
        print('<div><label class="obj">undef:</label><span class="obj">'+typeof cursor[field]+"</span></div>");
    }
}

var done = false;
function outp(x, id, name) {
    if(typeof x == "object") {
        // make x an obj of the form cursor[field]
        x = {"...": x};
        printObj(x, "...", id, [name]);
    }
    else if(x == null || typeof x == "native" || typeof x == "function")
        print(x);
    else
        printEditableField(x, id, [name]);
}

  // top == show all collections
  var top = request.ns == null;
  var collection;
  if( top ) collection = db["system.namespaces"];
  else collection = db[request.ns.substring( request.ns.indexOf('.')+1 )]; // remove db name from the str

  var hdr = top ? "All collections for database " + db.getName() : "Collection: " + request.ns;
  if( top ) {
    // we'll sort by collection name
    collection.ensureIndex( {name:true} );
  }

  // ignore internal transient variables
  var ignore= { _ns:1, _save:1, _update:1 };

var rows, max;
if(request.all) {
    rows = collection.find().sort( { name : 1 } ).toArray();
    max = rows.length+1;
}
else {
    max = top?1000:(request.max ? parseInt(request.max) : 100);
    rows = collection.find().sort( { name : 1 } ).limit(max).toArray();
}

  var fields;
  // thresh: threshold for which we add a column to the table we generate.  so uncommon fields just go in the catchall.
  var thresh = rows.length < 4 ? 0 : rows.length / 2;
  if( top )
    fields = [ 'name' ];
  else {
    fields = [];
    var f = {};
    for( var i=0; i < rows.length; i++ ) {
      for( var e in rows[i] ) {
	  if( f[e] == null ) f[e] = 1; else  f[e]++; // count frequency
      }
    }
    for( var g in f ) {
	if( f[g] >= thresh ) fields.push(g);
    }
  }
%>

<h3><%=hdr%></h3>
<% if(!top) { %>
   <form style="display: inline;">Show first <input type="hidden" name="ns" value="<%= request.ns %>"><input type="text" name="max" /> rows <input type="submit" value="Go"></form>
   <% if(!request.all) { %>
      <form style="padding-left: 15px; display: inline;"><input type="hidden" name="ns" value="<%= request.ns %>"><input type="submit" name="all" value="Show All" /></form>
      <%
   } %>
<% } %>



<script type="text/javascript">
function showObj(i) {
         document.getElementById(i).style.display = "block";
}

function hideObj(i) {
         document.getElementById(i).style.display = "none";
}

function deleteRow(id) {
    var passData = "db=<%= request.ns %>&action=delete&id="+id;
    ajax(passData, "editDb", function(response) {
        alert("Row successfully deleted");
        document.getElementById("row"+id).style.display = "none";
    });
}

function editField(id, type, dbid, path) {
    var editSpan = document.getElementById("f"+id);
    editSpan.setAttribute("onclick", "");
    var val = editSpan.innerHTML;
    if(type == "boolean") {
        var yes = (val == "true") ? "checked" : "";
        editSpan.innerHTML = '<input type="checkbox" id="in'+id+'" '+yes+'/><input type="button" value="Save" onclick="saveValue('+id+',\''+type+'\',\''+dbid+'\',\''+path+'\')" />';
    }
    if(type == "string" || type == "number") {
        var xtra = document.getElementById("extra"+id);
        if(xtra)
            editSpan.innerHTML = '<textarea id="in'+id+'">'+xtra.innerHTML+'</textarea><input type="button" value="Save" onclick="saveValue('+id+',\''+type+'\',\''+dbid+'\',\''+path+'\')" />';
        else
            editSpan.innerHTML = '<input type="text" id="in'+id+'" value="'+editSpan.innerHTML+'" /><input type="button" value="Save" onclick="saveValue('+id+',\''+type+'\',\''+dbid+'\',\''+path+'\')" />';
    }
}

function saveValue(id, type, dbid, path) {
    var editSpan = document.getElementById("f"+id);

    passData = "db=<%= request.ns %>&action=edit&type="+type+"&id="+dbid+"&path="+path+"&retval="+id+"&val=";
    if(type == "boolean") {
        ajax(passData+document.getElementById("in"+id).checked, "editDb", function(response) {
            if(response != "") {
                alert("Error: the maximum depth for table editing is 5 levels.  You are trying to set a variable "+response+" levels deep.");
                return;
            }
            editSpan.innerHTML = document.getElementById("in"+id).checked;
            editSpan.setAttribute("onclick", "editField("+id+",'"+type+"','"+dbid+"','"+path+"')");
        });
    }
    if(type == "number" || type == "string") {
        var xtra = document.getElementById("extra"+id);
        if(xtra) {
            ajax(passData+document.getElementById("in"+id).innerHTML, "editDb", function(response) {
                if(response == "") {
                    alert("Error: the maximum depth for table editing is 5 levels.  You are trying to set a variable "+response+" levels deep.");
                    return;
                }
                editSpan.innerHTML = document.getElementById("in"+id).innerHTML;
                editSpan.setAttribute("onclick", "editField("+id+",'"+type+"','"+dbid+"','"+path+"')");
            });
        }
        else {
            ajax(passData+document.getElementById("in"+id).value, "editDb", function(response) {
                if(response == "") {
                    alert("Error: the maximum depth for table editing is 5 levels.  You are trying to set a variable "+response+" levels deep.");
                    return;
                }
                editSpan.innerHTML = document.getElementById("in"+id).value;
                editSpan.setAttribute("onclick", "editField("+id+",'"+type+"','"+dbid+"','"+path+"')");
            });
        }
    }


}


</script>

<%
core.db.db();

print('<div id="myMarkedUpContainer">');
/*print('\n<table class="dbview" id="dbview_table">');
print("<thead><tr>");

if( top ) {
    print("<tr><th>Name</th><th>Indicies</th><th>Create Date</th><th>Creator</th><th>Modified Date</th><th>Modifier</th><th>Size</th><th>Rows</th></tr>");
}
else {
    print("<th>Delete Row</th>");
    for( h in f ) {
        if( f[h]>thresh && !ignore[h] ) { print("<th>");print(h);print("</th>"); }
    }
    print("<th>(other)</th></tr>\n");
}
print("</thead><tbody>");

for( var i=0; i < rows.length; i++ ) {
    print('<tr id="row'+rows[i]._id+'">');
    var obj=rows[i];
    if( top ) {
        %>
        <td><a href="?ns=<%=obj.name%>"><%=obj.name.substring(obj.name.indexOf(".")+1)%></a></td>
        <%
        var dbinfo = validate(obj.name.substring(obj.name.indexOf(".")+1));
        print("<td>");
        while(i<rows.length-1 && rows[i+1].name.indexOf("$") > 0) {
            obj = rows[++i];
            var idx=top ? obj.name.indexOf("$") : -1;
            if( obj.name && idx>=0 ) {
	        var idxname = obj.name.substring(idx+1);
                print("index "); print(idxname); print(' ');
	        var idxobj = db.system.indexes.findOne( { name: idxname, ns: obj.name.substring(0,idx-1) } );
	        print(idxobj?tojson(idxobj.key):"null");
                print("<br />");
            }
        }
	print("</td><td></td><td></td><td></td><td></td>");
        dbinfo = dbinfo.result.split(/\s+/);
        var sizeidx = dbinfo.indexOf("size:")+1;
        print("<td>" + (dbinfo[sizeidx]) + "</td>");
        print("<td>" + dbinfo[2] + "</td>");
    } else {
        print('<td><input type="button" onclick="deleteRow(\''+rows[i]._id+'\')" value="x" />');
        for( h in f ) {
	    if( f[h]>thresh && !ignore[h] ) {
	        print("<td>");
	        outp(obj[h], rows[i]._id, h);
	        print("</td>");
	    }
        }
        print("<td>");
        var first = true;
        for( x in obj ) {
            if( f[x]<= thresh ) {
	        if( !first )
		    print(", ");
	        first = false;
	        print(x); print(": "); outp(tojson(obj[x]));
            }
        }
        print("</td>\n");
    }
    print("</tr>");
}

print("</tbody></table></div>");*/
print("</div>");

if( rows.length >= max )
    print("<br>Only first " + max + " displayed");

%>

<!--CSS file (default YUI Sam Skin) -->
<link rel="stylesheet" type="text/css" href="http://developer.yahoo.com/yui/assets/yui.css" >
<link type="text/css" rel="stylesheet" href="http://yui.yahooapis.com/2.5.1/build/datatable/assets/skins/sam/datatable.css">
<link type="text/css" rel="stylesheet" href="http://yui.yahooapis.com/2.5.1/build/logger/assets/skins/sam/logger.css">
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.5.1/build/button/assets/skins/sam/button.css" />
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.5.1/build/container/assets/skins/sam/container.css" />

<!-- Dependencies -->
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/yahoo-dom-event/yahoo-dom-event.js"></script>
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/element/element-beta-min.js"></script>
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/button/button-min.js"></script>
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/datasource/datasource-beta-debug.js"></script>

<!-- OPTIONAL: JSON Utility -->
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/json/json-min.js"></script>

<!-- OPTIONAL: Drag Drop (enables resizeable or reorderable columns) -->
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/dragdrop/dragdrop-min.js"></script>

<!-- Source files -->
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/datatable/datatable-beta-debug.js"></script>
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/logger/logger-debug.js"></script>
<script type="text/javascript" src="http://yui.yahooapis.com/2.5.1/build/container/container-min.js"></script>

<!--<script type="text/javascript">
var myLogReader = new YAHOO.widget.LogReader();
</script>
-->

<script type="text/javascript">

<%
if(top) {
    var cols = [ "name", "index" ]; //, "Create Date", "Creator", "Modified Date", "Modifier", "Size", "Rows"];
}
%>

addSearchForm = function(n) {
    var str = '<input type="text" name="'+n+'" class="minisearch"';
    if(n == "Name") {
        return '<nobr><input type="button" name="action" onclick="doSearch()" value="Search" />'+str+"></nobr>";
    }
    return str+' style="width:100%;">';
}

function doSearch() {
    var passData = getSearchArgs();
    lastSearch = passData;
    refreshTable();
}

<% if(top) { %>
             var handleOkay = function() {
                 this.hide();
             }

function getValidation(tablename) {
    ajax("action=validation&ns="+tablename, "showTable", function(response) {
        var simpledialog1 = new YAHOO.widget.SimpleDialog("simpledialog1",
            { width: "300px",
            fixedcenter: true,
            draggable: true,
            visible: false,
            close: true,
            icon: YAHOO.widget.SimpleDialog.ICON_INFO,
            text: response,
            buttons: [ { text:"Okay", handler:handleOkay, isDefault:true } ]
            } );
        simpledialog1.setHeader("Validation");
        simpledialog1.render("myMarkedUpContainer");
        simpledialog1.show();
    });
}
             <% } %>

function refreshTable(passData){
    if(passData) passData = passData+"&";
    else passData = "";
    myDataSource.sendRequest(passData + "&"+lastSearch, updateCaseTable);
}


function getSearchArgs() {
    var passData = "";
    var myarr = YAHOO.util.Dom.getElementsByClassName("minisearch");
    var dict = {};
    // FIXME:
    // This looks convoluted, but YUI inserts bonus accessibility fields
    // that get duplicate headers (i.e. input boxes) and so need to be
    // stripped out. I'd love to use whichever field was changed most
    // recently, but that's hard, and this hack is easy.
    // Overwrite earlier input fields with the values from later ones.

    for(var i=0; i<myarr.length; i++) {
        if(myarr[i].value != "") {
            dict[myarr[i].name] = myarr[i].value;
        }
    }
    var pairs = [];
    for(var key in dict){
        pairs.push(key+"="+dict[key]);
    }

    passData = pairs.join('&');
    return passData;
}

myDataSource = new YAHOO.util.DataSource('showTable?<%= request.ns ? "ns="+request.ns : ""  %>');
myDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
myDataSource.connXhrMode = "queueRequests";
oConfigs = {
    initialRequest: "",
    <%= top ? 'sortedBy:{key:"name", dir:"desc"}' : '' %>
};

myDataSource.responseSchema = {
    resultsList: "rows",
    fields: [ <% if(top) {
        for(var i in cols) {
            print('{ key: '+tojson(cols[i])+", parser:YAHOO.util.DataSource.parseString },");
        }
    } else {
        %>

        {key: "delete"}, <%
        for(var i in rows[0]) {
            if(!ignore[i]) {
                print('{ key: "'+i+'"');
                print(', parser:YAHOO.util.DataSource.parseString');
                print('},');
            }
        }
    }
              %>

            ]
};



var myColumnDefs = [ <% if(top) {
    print('{ label: addSearchForm("'+cols[0]+'"), children: [{key: '+ tojson(cols[0]) + ', label: "Name", formatter: "nameLink", sortable: true}]},');
    print('{ label: addSearchForm("'+cols[1]+'"), children: [{key: '+ tojson(cols[1]) + ', label: "Indicies", sortable: true}]},');
    print('{ label: "", children: [{key: "validate", label: "Validate", formatter: "validateBtn" }]},');
} else {
    %>
    { label: '<input type="button" value="Search" onclick="doSearch()">', children: [{key: "delete", label:"Delete", formatter: "deleteBtn"}]},
    <%
    for(var i in rows[0]) {
        if(!ignore[i]) {
       print('{ label: addSearchForm("'+i+'"), children: [{ key: "'+i+'" ');
            if(typeof rows[0][i] == "number") {
                print(', formatter: "number"');
            }
            print(', sortable: true } ] },');
        }
    }
}
                     %>
                   ];




var myDataTable = new YAHOO.widget.DataTable("myMarkedUpContainer", myColumnDefs, myDataSource, oConfigs);

updateCaseTable = {
    success : function(){ myDataTable.onDataReturnInitializeTable.apply(myDataTable, arguments); myPaginator.setTotalRecords(myDataTable.getRecordSet().getLength()); },
    failure : myDataTable.onDataReturnInitializeTable,
    scope : myDataTable
};

myDataSource.liveData = "showTable?";

<% if(top) { %>
nameLinkFormatter = function(elCell, oRecord, oColumn, oData) {
    elCell.innerHTML = '<a href="?ns='+oRecord.getData("name")+'">'+oRecord.getData("name").substring(oRecord.getData("name").indexOf(".")+1)+"</a>";
}
validateBtnFormatter = function(elCell, oRecord, oColumn, oData) {
    elCell.innerHTML = '<input type="button" value="Validate" onclick="getValidation(\''+oRecord.getData("name")+'\')" />';
}

YAHOO.widget.DataTable.Formatter.nameLink = nameLinkFormatter;
YAHOO.widget.DataTable.Formatter.validateBtn = validateBtnFormatter;
<% } else { %>
deleteBtnFormatter = function(elCell, oRecord, oColumn, oData) {
    elCell.innerHTML = '<input type="button" value="X" onclick="deleteRow(\''+oRecord.getData("_id")+'\')" />';
}
YAHOO.widget.DataTable.Formatter.deleteBtn = deleteBtnFormatter;
<% } %>
</script>
