<%
/* dbview.jxp - database content viewer utility */
head.push('<script type="text/javascript" src="/@@/yui/current/yuiloader/yuiloader-beta-min.js" ></script>');

core.content.html();

var objcount = 0; // unique id for each object's div
var fieldcount = 0;

function printEditableField(x, id, path) {
    if(typeof x == "string") {
        if( x.length<=20 )
            x = content.HTML.escape_html(x);
        else {
	    x = content.HTML.escape_html(x)
            // put extra text in a hidden div
            print('<div id="extra'+fieldcount+'" style="display: none;">'+x+'</div>');
            x = x.substring(0,18)+"...";
        }
    }

    print('<span class="obj" id="f'+fieldcount+'" onclick=\'editField('+fieldcount+', "'+(typeof x)+'","'+id+'","'+path+'")\'>'+x+"</span>");
    fieldcount++;
}

function printObj(cursor, field, id, path) {
    if(!cursor || !cursor[field]) return;

    if(cursor[field] == null || typeof cursor[field] == "native" || typeof cursor[field] == "function") {
        print('<div><label class="obj">'+field+':</label><span class="obj">'+cursor[field]+"</span></div>");
    }
    else if(typeof cursor[field] == "boolean" || typeof cursor[field] == "string" || typeof cursor[field] == "number") {
        print('<div><label class="obj">'+field+':</label>');
        printEditableField(cursor[field], id, path);
        print('</div>');
    } else if(typeof cursor[field] == "object") {
        var name;
        var desc;
        if(cursor[field] instanceof Date) {
            name = "Date";
            desc = cursor[field].toString();
        }
        else if(cursor[field] instanceof Array) {
            name = "Array";
            desc = "["+cursor[field].length+"]";
        }
        else {
            name = "Object";
            desc = field;
        }
        print("<div class=\"parent\" onclick=\"showObj('o"+objcount+"')\"><label class=\"obj\">"+name+"</label><span class=\"obj\">"+desc+"</span></div><div class=\"obj\" id=\"o"+objcount+"\">");
        var tempobj = objcount;
        objcount++;
        for(var name in cursor[field]) {
            path.push(name);
            printObj(cursor[field], name, id, path);
            path.pop();
        }
        print("<div><input type='button' onclick='hideObj(\"o"+tempobj+"\")' value='close'></div></div>");
    } else {
        print('<div><label class="obj">undef:</label><span class="obj">'+typeof cursor[field]+"</span></div>");
    }
}

var done = false;
function outp(x, id, name) {
    if(typeof x == "object") {
        // make x an obj of the form cursor[field]
        x = {"...": x};
        printObj(x, "...", id, [name]);
    }
    else if(x == null || typeof x == "native" || typeof x == "function")
        print(x);
    else
        printEditableField(x, id, [name]);
}

  // top == show all collections
  var top = request.ns == null;
  var collection;
  if( top ) collection = db["system.namespaces"];
  else collection = db[request.ns.substring( request.ns.indexOf('.')+1 )]; // remove db name from the str

var appName = request.getHost();
appName = (appName.indexOf(".") == -1) ? appName : appName.substring(0, appName.indexOf("."));

  var hdr = top ? "All collections for " + appName + " application" : "Collection: " + request.ns;
  if( top ) {
    // we'll sort by collection name
    collection.ensureIndex( {name:true} );
  }

  // ignore internal transient variables
  var ignore= { _ns:1, _save:1, _update:1 };

var rows, max;
if(request.all) {
    rows = collection.find().sort( { name : 1 } ).toArray();
    max = rows.length+1;
}
else {
    max = top?1000:(request.max ? parseInt(request.max) : 100);
    rows = collection.find().sort( { name : 1 } ).limit(max).toArray();
}

  var fields;
  // thresh: threshold for which we add a column to the table we generate.  so uncommon fields just go in the catchall.
  var thresh = rows.length < 4 ? 0 : rows.length / 2;
  if( top )
    fields = [ 'name' ];
  else {
    fields = [];
    var f = {};
    for( var i=0; i < rows.length; i++ ) {
      for( var e in rows[i] ) {
	  if( f[e] == null ) f[e] = 1; else  f[e]++; // count frequency
      }
    }
    for( var g in f ) {
	if( f[g] >= thresh ) fields.push(g);
    }
  }
%>

<h3><%=hdr%></h3>
<% if(!top) { %>
<a href="dbview" style="display: block;">Back to Collection View</a>
   <!--<form style="display: inline;">Show first <input type="hidden" name="ns" value="<%= request.ns %>"><input type="text" name="max" /> rows <input type="submit" value="Go"></form>
   <% if(!request.all) { %>
      <form style="padding-left: 15px; display: inline;"><input type="hidden" name="ns" value="<%= request.ns %>"><input type="submit" name="all" value="Show All" /></form>
      <%
   } %>-->
<% } %>



<script type="text/javascript">
var lastSearch = "";

function showObj(i) {
         document.getElementById(i).style.display = "block";
}

function hideObj(i) {
         document.getElementById(i).style.display = "none";
}

function deleteRow(id) {
    var handleDeleteRow = function() {
        var passData = "ns=<%= request.ns %>&action=delete&id="+id;
        ajax(passData, "editDb", function(response) {
            refreshTable();
        });
        this.hide();
    }

    var simpledialog1 = new YAHOO.widget.SimpleDialog("dropTableDlg",
        { width: "300px",
        fixedcenter: true,
        draggable: true,
        visible: false,
        close: true,
        icon: YAHOO.widget.SimpleDialog.ICON_WARN,
        text: "Are you sure you want to delete this row?",
        buttons: [ { text:"Yes", handler:handleDeleteRow },
        { text:"No", handler:handleNo, isDefault:true } ]
        } );
    simpledialog1.setHeader("Delete Row");
    simpledialog1.render("myMarkedUpContainer");
    simpledialog1.show();
}

function customSplit(str, num) {
    var a = str.split(":");
    for(var i=num; i<a.length; i++) {
        a[num-1] += ":"+a[i];
    }
    return a;
}

function printDiv(fields, bd) {
    f = customSplit(fields, 3);
    if(f[0] == "_id") return;

    bd.innerHTML += '<div class="elem"><label class="obj">'+f[0]+': </label>';
    if(f[1] == "object") {
        subobj = f[2].substring(f[2].indexOf("{")+1, f[2].lastIndexOf("}"));
        subobj = subobj.split("&");
        var outerDiv = document.createElement("div");
        outerDiv.setAttribute("class", "obj");
        for(var j=0; j<subobj.length-1; j++) {
            printDiv(subobj[j], outerDiv);
        }
        bd.appendChild(outerDiv);
    }
    else {
        bd.innerHTML += '<input type="text" value="'+f[2]+'"></div>';
    }
}

function editRow(id) {
    ajax("ns=<%= request.ns %>&id="+id, "showTable", function(response) {
        // get bd div
        var bd = document.getElementById("editRecord");
        bd = YAHOO.util.Dom.getChildrenBy(bd, function(node) {
            return node.id == "bd" ? true : false;
        });
        bd = bd[0];

        var fields = response.split("&&");
        // for each field, display the relevant input type
        for(var i=0; i<fields.length-1; i++) {
            printDiv(fields[i], bd);
        }
        editRowPanel.bringToTop();
        editRowPanel.show();
    });
}




function editField(id, type, dbid, path) {
    var editSpan = document.getElementById("f"+id);
    editSpan.setAttribute("onclick", "");
    var val = editSpan.innerHTML;
    if(type == "boolean") {
        var yes = (val == "true") ? "checked" : "";
        editSpan.innerHTML = '<input type="checkbox" id="in'+id+'" '+yes+'/><input type="button" value="Save" onclick="saveValue('+id+',\''+type+'\',\''+dbid+'\',\''+path+'\')" />';
    }
    if(type == "string" || type == "number") {
        var xtra = document.getElementById("extra"+id);
        if(xtra)
            editSpan.innerHTML = '<textarea id="in'+id+'">'+xtra.innerHTML+'</textarea><input type="button" value="Save" onclick="saveValue('+id+',\''+type+'\',\''+dbid+'\',\''+path+'\')" />';
        else
            editSpan.innerHTML = '<input type="text" id="in'+id+'" value="'+editSpan.innerHTML+'" /><input type="button" value="Save" onclick="saveValue('+id+',\''+type+'\',\''+dbid+'\',\''+path+'\')" />';
    }
}

function saveValue(id, type, dbid, path) {
    var editSpan = document.getElementById("f"+id);

    passData = "ns=<%= request.ns %>&action=edit&type="+type+"&id="+dbid+"&path="+path+"&retval="+id+"&val=";
    if(type == "boolean") {
        ajax(passData+document.getElementById("in"+id).checked, "editDb", function(response) {
            if(response != "") {
                alert("Error: the maximum depth for table editing is 5 levels.  You are trying to set a variable "+response+" levels deep.");
                return;
            }
            editSpan.innerHTML = document.getElementById("in"+id).checked;
            editSpan.setAttribute("onclick", "editField("+id+",'"+type+"','"+dbid+"','"+path+"')");
        });
    }
    if(type == "number" || type == "string") {
        var xtra = document.getElementById("extra"+id);
        if(xtra) {
            ajax(passData+document.getElementById("in"+id).innerHTML, "editDb", function(response) {
                if(response == "") {
                    alert("Error: the maximum depth for table editing is 5 levels.  You are trying to set a variable "+response+" levels deep.");
                    return;
                }
                editSpan.innerHTML = document.getElementById("in"+id).innerHTML;
                editSpan.setAttribute("onclick", "editField("+id+",'"+type+"','"+dbid+"','"+path+"')");
            });
        }
        else {
            ajax(passData+document.getElementById("in"+id).value, "editDb", function(response) {
                if(response == "") {
                    alert("Error: the maximum depth for table editing is 5 levels.  You are trying to set a variable "+response+" levels deep.");
                    return;
                }
                editSpan.innerHTML = document.getElementById("in"+id).value;
                editSpan.setAttribute("onclick", "editField("+id+",'"+type+"','"+dbid+"','"+path+"')");
            });
        }
    }


}

var createRecordPanel;
var createTablePanel;

function createRecord() {
    createRecordPanel.show();
}
function createTable() {
    createTablePanel.show();
}

function addTable() {
var tbl = document.getElementById("createTableForm");

var passData = "";
var children = YAHOO.util.Dom.getChildren(tbl);
for(var i=0; i<children.length; i++) {
var c = YAHOO.util.Dom.getLastChild(children[i]);
if(c.getAttribute("type") == "text")
                                if(c.value != "") passData += "&"+c.name+"="+c.value;
if(c.getAttribute("type") == "checkbox")
                                if(c.checked) passData += "&"+c.name;
}
ajax("action=create"+passData, "editDb", function(response) {
refreshTable();
});
createTablePanel.hide();
}

function closeCreateTableDlg() {
createTablePanel.hide();
}

</script>

<%
core.db.db();
if(top) {
    %>
    <input type="button" value="Create Table" onclick="createTable()" />
    <%
} else {
    %>
    <input type="button" value="Add Record" onclick="createRecord()" />
    <%
}
%>


<div id="myMarkedUpContainer" class="yui-skin-sam">
</div>

<%
if( rows.length >= max )
    print("<br>Only first " + max + " displayed");

if(top) {
    %>
<div id="createTable">
<div class="hd">Create Table</div>
<div class="bd">
<form id="createTableForm">
    <div><label>Table name: </label><input type="text"  name="tablename"></div>
    <div><label>Fixed: </label><input type="checkbox"  name="fixed"></div>
    <div><label>Size: </label><input type="text" name="size"></div>
<div><label>Max: </label><input type="text" name="max"></div>
</form>
</div>
<div class="ft"><input type="button" value="Save" onclick="addTable()"/>
<input type="button" value="Cancel" onclick="closeCreateTableDlg()" />
</div>
</div>

</div>
<%
} else {
   %>
<div id="createRecord">
<div class="hd">Add Record</div>
<div class="bd">
  Enter fields at your own risk!  All text will all be processed as strings.
  <table>
    <tr>
<%
for(var b in fields) {
    if(!ignore[fields[b]] && fields[b] != "_id")
        print("<th>"+fields[b]+"</th>");
}
print("</tr><tr>");
for(var b in fields) {
    if(!ignore[fields[b]] && fields[b] != "_id")
        print("<td><input type='text' name='"+fields[b]+"' /></td>");
}
%>
</tr>
</table>
</div>
<div class="ft">
<input type="button" value="Save" onclick="saveRecord()"/>
<input type="button" value="Cancel" onclick="handleNo" />
</div>
</div>

<div id="editRecord" style="background:gainsboro;">
<div id="hd">Edit Record</div>
<div id="bd"></div>
<div id="ft"><input type="button" value="Save" onclick="saveRecord()"/>
<input type="button" value="Cancel" onclick="handleNo" />
</div>
</div>

<% } %>


<!--CSS file (default YUI Sam Skin) -->
<link type="text/css" rel="stylesheet" href="/@@/yui/current/datatable/assets/skins/sam/datatable.css">
<link type="text/css" rel="stylesheet" href="/@@/yui/current/logger/assets/skins/sam/logger.css">
<link rel="stylesheet" type="text/css" href="/@@/yui/current/button/assets/skins/sam/button.css" />
<link rel="stylesheet" type="text/css" href="/@@/yui/current/container/assets/skins/sam/container.css" />


<!-- Dependencies -->
<script type="text/javascript" src="/@@/yui/current/yahoo-dom-event/yahoo-dom-event.js"></script>
<script type="text/javascript" src="/@@/yui/current/element/element-beta-min.js"></script>
<script type="text/javascript" src="/@@/yui/current/button/button-min.js"></script>
<script type="text/javascript" src="/@@/yui/current/datasource/datasource-beta-debug.js"></script>

<!-- OPTIONAL: JSON Utility -->
<script type="text/javascript" src="/@@/yui/current/json/json-min.js"></script>

<!-- OPTIONAL: Drag Drop (enables resizeable or reorderable columns) -->
<script type="text/javascript" src="/@@/yui/current/dragdrop/dragdrop-min.js"></script>

<!-- Source files -->
<script type="text/javascript" src="/@@/yui/current/datatable/datatable-beta-debug.js"></script>
<script type="text/javascript" src="/@@/yui/current/logger/logger-debug.js"></script>
<script type="text/javascript" src="/@@/yui/current/container/container-min.js"></script>

<!--<script type="text/javascript">
var myLogReader = new YAHOO.widget.LogReader();
</script>
-->

<script type="text/javascript">

<%
if(top) {
    var cols = [ "name", "index", "fixed" ]; //, "dateCreate", "dateUpdate", "size", "rows", "fixed" ];
}
%>

addSearchForm = function(n) {
    var str = '<input type="text" name="'+n+'" class="minisearch"';
    if(n == "Name") {
        return '<nobr><input type="button" name="action" onclick="doSearch()" value="Search" />'+str+"></nobr>";
    }
    return str+' style="width:100%;">';
}

function doSearch() {
    var passData = getSearchArgs();
    lastSearch = passData;
    refreshTable();
}
function clearSearch() {
    var myarr = YAHOO.util.Dom.getElementsByClassName("minisearch");
    for(var i in myarr) {
        myarr[i].value = "";
    }
    lastSearch = "";
    refreshTable();
}

var handleNo = function() {
    this.hide();
}

<%
if(top) {
    %>
    var tablename = "";

    function getSelectedIndices(separator) {
        var idxes = document.getElementsByName(tablename);
        var list = [];
        for(var i=0; i<idxes.length; i++) {
            if (idxes[i].checked)
                list.push( idxes[i].value );
        }
        return list.join(separator);
    }

    var handleDrop = function() {
        ajax("action=drop&ns="+tablename, "editDb", function(x) {
            refreshTable();
        });
        this.hide();
    }

    function getValidation(tablename) {
        ajax("action=validation&ns="+tablename, "showTable", function(response) {
            var simpledialog1 = new YAHOO.widget.SimpleDialog("simpledialog1",
                { width: "300px",
                fixedcenter: true,
                draggable: true,
                visible: false,
                close: true,
                icon: YAHOO.widget.SimpleDialog.ICON_INFO,
                text: response,
                buttons: [ { text:"OK", handler:handleNo, isDefault:true } ]
                } );
            simpledialog1.setHeader("Validation");
            simpledialog1.render("myMarkedUpContainer");
            simpledialog1.show();
        });
    }

    function dropTable(tname) {
        tablename = tname;
        var simpledialog1 = new YAHOO.widget.SimpleDialog("dropTableDlg",
            { width: "300px",
            fixedcenter: true,
            draggable: true,
            visible: false,
            close: true,
            icon: YAHOO.widget.SimpleDialog.ICON_WARN,
            text: "Are you sure you want to drop this table?",
            buttons: [ { text:"Yes", handler:handleDrop },
            { text:"No", handler:handleNo, isDefault:true } ]
            } );
        simpledialog1.setHeader("Drop Table");
        simpledialog1.render("myMarkedUpContainer");
        simpledialog1.show();
    }

    function dropIndices(tname) {
        tablename = tname;
    var handleIDrop = function() {
        var list = getSelectedIndices(",");
        ajax("action=dropI&ns="+tablename+"&idx="+list, "editDb", function(x) {
            refreshTable();
        });
        this.hide();
    }
        var prettyList = getSelectedIndices(", ");
        if(prettyList.length == 0) {
            alert("You must check at least one index.");
            return;
        }
        var simpledialog1 = new YAHOO.widget.SimpleDialog("dropTableDlg",
            { width: "300px",
            fixedcenter: true,
            draggable: true,
            visible: false,
            close: true,
            icon: YAHOO.widget.SimpleDialog.ICON_WARN,
            text: "Are you sure you want to drop "+prettyList+" from "+tablename+"?",
            buttons: [ { text:"Yes", handler:handleIDrop },
            { text:"No", handler:handleNo, isDefault:true } ]
            } );
        simpledialog1.setHeader("Drop Indices");
        simpledialog1.render("myMarkedUpContainer");
        simpledialog1.show();
    }

    <%
}
%>

function refreshTable(passData){
    if(passData)
        passData = passData+"&";
    else
        passData = "";
    myDataSource.sendRequest("<%= request.ns ? 'ns='+request.ns+'&' : '' %>action=search&"+passData+lastSearch, updateCaseTable);
}


function getSearchArgs() {
    var passData = "";
    var myarr = YAHOO.util.Dom.getElementsByClassName("minisearch");
    var dict = {};
    // FIXME:
    // This looks convoluted, but YUI inserts bonus accessibility fields
    // that get duplicate headers (i.e. input boxes) and so need to be
    // stripped out. I'd love to use whichever field was changed most
    // recently, but that's hard, and this hack is easy.
    // Overwrite earlier input fields with the values from later ones.

    for(var i=0; i<myarr.length; i++) {
        if(myarr[i].value != "") {
            dict[myarr[i].name] = myarr[i].value;
        }
    }
    var pairs = [];
    for(var key in dict){
        pairs.push(key+"="+dict[key]);
    }

    passData = pairs.join('&');
    return passData;
}

// Custom sorters
var sortHex = function(a, b, desc) {
    return parseInt(a.getData("_id"), 16) >= parseInt(b.getData("_id"), 16) ? (desc ? 1 : -1) : (desc ? -1 : 1) ;
}

// Todo: write date sort
var sortDate = function(a, b, desc) {}


myDataSource = new YAHOO.util.DataSource('showTable?<%= request.ns ? "ns="+request.ns : ""  %>');
myDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
myDataSource.connXhrMode = "queueRequests";

var myPaginator = new YAHOO.widget.Paginator({
    rowsPerPage: 20,
    alwaysVisible : false
});

oConfigs = {
    initialRequest: "",
    paginator: myPaginator,
    <%= top ? 'sortedBy:{key:"name", dir:"desc"}' : '' %>
};

myDataSource.responseSchema = {
    resultsList: "rows",
    fields: [ <% if(top) {
        for(var i in cols) {
            print('{ key: '+tojson(cols[i])+", parser:YAHOO.util.DataSource.parseString },");
        }
    } else {
        %>

        {key: "delete"}, <%
        if(rows && rows[0]) {
            for(var i in rows[0]) {
                if(!ignore[i]) {
                    print('{ key: "'+i+'"');
                    print(', parser:YAHOO.util.DataSource.parseString');
                    print('},');
                }
            }
        }
    }
              %>

            ]
};



var myColumnDefs = [ <% if(top) {
    print('{ label: "Name", sortable: true, key: '+ tojson(cols[0])+', formatter: "nameLink", children: [ { label: addSearchForm("'+cols[0]+'"), sortable: false } ] },');
    print('{ label: "Indices", sortable: true, formatter: "dropIdx", key: '+ tojson(cols[1]) + ', children: [{ label: addSearchForm("'+cols[1]+'"), sortable: false }]},');
    print('{ label: "Fixed", sortable: true, key: '+ tojson(cols[2]) + ', children: [{ label: addSearchForm("'+cols[2]+'"), sortable: false }]},');
    print('{ label: "Stats", children: [{key: "stats", label: "<input type=\'button\' onclick=\'doSearch()\' value=\'Search\' />", formatter: "statsBtn" }]},');
    print('{ label: "Drop Table", children: [{key: "drop", label: "<input type=\'button\' onclick=\'clearSearch()\' value=\'Refresh\' />", formatter: "dropBtn" }]},');
} else {
    %>
    { key: "edit", label:"Edit", formatter: "editBtn", children: [{label: '<input type="button" value="Search" onclick="doSearch()"><input type="button" onclick="clearSearch()" value="Refresh" />'}]},
    <%
    if(rows && rows[0]) {
        for(var i in rows[0]) {
            if(!ignore[i]) {
                // Special cases:
                // if _id, the column needs to be converted to hexidecimal and sorted that way
                if(i == "_id") {
                    print('{ label: "'+i+'", sortable: true, sortOptions:{sortFunction:sortHex}, children: [{ label: addSearchForm("'+i+ '"), key: "'+i+'", sortable: false } ] },');
                }
                else
                    print('{ label: "'+i+'", sortable: true, children: [{ label: addSearchForm("'+i+ '"), key: "'+i+'", sortable: false } ] },');
            }
        }
    }
    %>
    { key: "delete", label:"Delete", formatter: "deleteBtn", children: [{label: ''}]}
    <%
}
                     %>

                   ];


var myDataTable = new YAHOO.widget.DataTable("myMarkedUpContainer", myColumnDefs, myDataSource, oConfigs);


updateCaseTable = {
    success : function(){ myDataTable.onDataReturnInitializeTable.apply(myDataTable, arguments); myPaginator.setTotalRecords(myDataTable.getRecordSet().getLength()); },
    failure : myDataTable.onDataReturnInitializeTable,
    scope : myDataTable
};



myDataSource.liveData = "showTable?";

<%
if(top) {
    %>
    dropIdxFormatter = function(elCell, oRecord, oColumn, oData) {
        if(oRecord.getData("index").length > 0)
            elCell.innerHTML = oRecord.getData("index")+'<input type="button" onclick="dropIndices(\''+oRecord.getData("name")+'\')" value="Drop Index">';
        else
            elCell.innerHTML = oRecord.getData("index");
    }
    nameLinkFormatter = function(elCell, oRecord, oColumn, oData) {
        elCell.innerHTML = '<a href="?ns='+oRecord.getData("name")+'">'+oRecord.getData("name").substring(oRecord.getData("name").indexOf(".")+1)+"</a>";
    }
    statsBtnFormatter = function(elCell, oRecord, oColumn, oData) {
        elCell.innerHTML = '<input type="button" value="Stats" onclick="getValidation(\''+oRecord.getData("name")+'\')" />';
    }
    dropBtnFormatter = function(elCell, oRecord, oColumn, oData) {
        elCell.innerHTML = '<input type="button" value="Drop Table" onclick="dropTable(\''+oRecord.getData("name")+'\')" />';
    }

    YAHOO.widget.DataTable.Formatter.dropIdx = dropIdxFormatter;
    YAHOO.widget.DataTable.Formatter.nameLink = nameLinkFormatter;
    YAHOO.widget.DataTable.Formatter.statsBtn = statsBtnFormatter;
    YAHOO.widget.DataTable.Formatter.dropBtn = dropBtnFormatter;
    <%
}
else {
    %>
    deleteBtnFormatter = function(elCell, oRecord, oColumn, oData) {
        elCell.innerHTML = '<input type="button" value="Delete" onclick="deleteRow(\''+oRecord.getData("_id")+'\')" />';
    }
    editBtnFormatter = function(elCell, oRecord, oColumn, oData) {
        elCell.innerHTML = '<input type="button" value="Edit" onclick="editRow(\''+oRecord.getData("_id")+'\')" />';
    }

    YAHOO.widget.DataTable.Formatter.editBtn = editBtnFormatter;
    YAHOO.widget.DataTable.Formatter.deleteBtn = deleteBtnFormatter;
    <%
}
%>

createRecordPanel = new YAHOO.widget.Panel("createRecord", { visible:false, constraintoviewport: true } );
createRecordPanel.render("myMarkedUpContainer");

createTablePanel = new YAHOO.widget.Panel("createTable", { visible:false, constraintoviewport: true } );
createTablePanel.render("myMarkedUpContainer");

editRowPanel = new YAHOO.widget.Panel("editRecord", { visible: false, constraintoviewport: true, fixedcenter: true });
editRowPanel.render("myMarkedUpContainer");

</script>
