<% 

core.user.auth();
core.content.xml();

var myAuth = Auth.getUserDigest( request , db.getName() );
if ( ! myAuth ){
    Auth.rejectDigest( response , db.getName() );
    return;
}

SYSOUT( "-----" );
SYSOUT( request.getRawHeader() );

request.applyServletParams( /(.~~.webdav)(.*)/ , [ "root" , "file" ] );
var root = request.root;
if ( ! request.file ){
    request.applyServletParams( /(.*)/ , [ "file" ] );
    root = "";
}

if ( ! request.file )
    throw "no file:(";

SYSOUT( "file:" + request.file );

var theFile = openFile( request.file );

var method = request.getMethod();

if ( method == "OPTIONS" ){
    response.setHeader( "Allow" , "OPTIONS,GET,PROPFIND,PUT,PROPPATCH,LOCK,UNLOCK" );
    response.setHeader( "Dav" , "1,2" );
}
else if ( method == "PROPFIND" ){

    if ( theFile.exists() ){
        response.setResponseCode( 207 );
        response.setHeader( "Content-Type" , "text/xml; charset=iso-8859-1" );
        
        xmlHeader();
        
        var ms = davMultiStatus();
        
        propfind( ms , request.file , theFile, request.getIntHeader( "Depth" , 1 ) );
        
        xml.to( print , null , ms );
    }
    else {
        response.setResponseCode( 404 );
    }
}
else if ( method == "PROPPATCH" ){
    // TODO
}
else if ( method == "PROPFIND" ){
    // TODO
}
else if ( method == "GET" ){
    if ( theFile.exists() ){
        if ( theFile.isDirectory() ){
        }
        else {
            SYSOUT( "sending " + theFile + " length::" + theFile.length );
            response.sendFile( theFile );
        }
    }
    else
        response.setResponseCode( 404 );
}
else if ( method == "DELETE" ){
    if ( theFile.exists() ){
        if ( ! theFile.remove( true ) ){
            throw "couldn't delete : " + theFile;
        }
    }
    else {
        response.setResponseCode( 404 );
    }
}
else if ( method == "MKCOL" ){
    if ( theFile.exists() ){
        response.setResponseCode( 405 );
    }
    else {
        if ( ! theFile.mkdirs() ){
            throw "can't make directory : " + theFile;
        }
    }
}
else if ( method == "PUT" ){
    var pd = request.getPostData();
    SYSOUT( "PUT : pd=" + ( ! ( ! pd ) ) );
    if ( ! pd ){
        theFile.touch();
    }
    else {
        try {
            SYSOUT( "writing to " + theFile );
            pd.writeTo( theFile );
        }
        catch ( e ){
            throw "couldn't do PUT of [" + theFile + "] b/c : " + e;
        }
        response.setResponseCode( 201 );
    }
}
else if ( method == "MOVE" ){
    var to = request.getHeader( "Destination" );
    if ( ! to )
        throw ( "no to" );
    
    SYSOUT( "a:" + to );
    to = to.replace( /^https?:..[^\/]+/ , "" );
    SYSOUT( "b:" + to );
    to = to.replace( /\/~~.webdav/ , "" );
    SYSOUT( "c:" + to );

    theFile.renameTo( openFile( to ) );
    
}
else if ( method == "LOCK" ){
    xmlHeader();

    var myLock = lock( theFile );

    xml.to( print , null , myLock.obj );
    response.setHeader( "Lock-Token" , "<" + myLock.token + ">" );
}
else if ( method == "UNLOCK" ) {
    
}
else {
    throw "can't handle : " + method;
}

SYSOUT( response );

function xmlHeader(){
    response.getWriter().reset();
    print( "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" );
}

function davMultiStatus(){
    var o = Array();

    o._name = "D:multistatus";
    o._props = {};
    o._props["xmlns:D"] = "DAV:";
    
    return o;
}

function davResponse(){
    var o = Array();
    o._name = "D:response";
    o._props = {};
    o._props["xmlns:lp1"] = "DAV:";
    o._props["xmlns:lp2"] = "http://apache.org/dav/props/";
    return o;
}


function propfind( msg , uri , f , depth ){
    if ( ! depth )
        depth = 0;

    if ( ! f || ! f.exists() )
        return;
            
    var r = davResponse();
    msg.push( r );
    
    r["D:href"] = root + uri;
    
    var ps = Object();
    r["D:propstat"] = ps;    

    var prop = { 
        "lp1:getlastmodified" : f.lastModified().webFormat() , 
        "lp1:getetag" : f.lastModified().getTime() 
    };
    ps["D:prop"] = prop;

    if ( f.isDirectory() ){
        prop["lp1:resourcetype"] = { "D:collection" : null };
        prop["D:getcontenttype"] = "httpd/unix-directory";
        
        if ( depth > 0 ){
            var children = f.listFiles();
            for ( var i=0; i<children.length; i++ ){
                var nextURI = uri;
                if ( ! nextURI.endsWith( "/" ) )
                    nextURI += "/";
                nextURI += children[i].getName();
                
                propfind( msg , nextURI , children[i] , depth - 1 );
            }
        }
    }
    else {
        prop["lp1:resourcetype"] = null;
        prop["D:getcontenttype"] = "text/plain";

        prop["lp1:getcontentlength"] =  f.length;

    }
    
    prop["D:supportedlock"] = null;
    prop["D:lockdiscovery"] = null;

    ps["D:status"] = "HTTP/1.1 200 OK";

}

function lock( file ){
    var prop = { _name : "D:prop" , _props : { "xmlns:D" : "DAV:" } };
    
    var myLock = {};
    prop["D:lockdiscovery"] = { "D:activelock" : myLock };
    
    myLock["D:locktype"] = { "D:write" : null };
    myLock["D:lockscope"] = { "D:exclusive" : null };
    myLock["D:depth"] = { "infinity" : null };
    
    var token = "opaquelocktoken:" + Math.random();
    myLock["D:locktoken"] = { "D:href" : token };

    //<ns0:owner xmlns:ns0="DAV:"><ns0:href>erh-x61s\erh</ns0:href></ns0:owner><D:timeout>Second-3600</D:timeout>
    
    return { obj : prop , token : token };
}


%>

