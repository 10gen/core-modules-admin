<%
core.content.table();
core.content.html();
core.user.user();
core.user.auth();
core.app.bugtracker.data.feature();
core.net.url();
core.io.encode.javascript();
core.io.encode.json();
core.ext.asstring();

head.push("<script src=\"/~~/ui/js/common.js\"></script>");
head.push('<link rel="stylesheet" type="text/css" href="/@@/yui/current/menu/assets/skins/sam/menu.css">');
head.push("<link rel=\"stylesheet\" href='assets/bugtracker.css' type=\"text/css\"/>");
%>


<html>
  <head>
    <title>Cases List</title>
    <script type="text/javascript" src="/@@/yui/current/yahoo-dom-event/yahoo-dom-event.js"></script>
    <script type="text/javascript" src="/@@/yui/current/container/container_core.js"></script>
    <script type="text/javascript" src="/@@/yui/current/menu/menu.js"></script>
    <script type="text/javascript" src="assets/menu.js"></script>
  </head>
  <body class="yui-skin-sam">
    <div id="top_menu" class="yuimenubar">
      <div class="bd">
        <ul class="first-of-type">
          <li class="yuimenubaritem first-of-type"><a href="case_edit">New Case</a></li>
          <li class="yuimenubaritem first-of-type"><a onclick="myNewBugs('<%= user.name %>')">My New Bugs</a></li>
          <li class="yuimenubaritem first-of-type"><a onclick="document.getElementById('editproject').style.display='block'; projEditPanel.bringToTop(); projEditPanel.show()">Edit Projects</a></li>
        </ul>
      </div>
    </div>

    <div id="yui-main">

<%
if(request.msg){ %>
<div class="notice"><%= content.HTML.escape_html(request.msg) %>
  <% } %>

  <div id="toolbox">
    <% core.app.bugtracker.html.toolbox(); %>
  </div>


<!-- Dialogs section -->

<div id="confirm" style="display: none;">
  <div class="hd">Delete Cases</div>
  <div class="bd">
    <form id="confirmForm">
      <div class="field">Are you sure you want to delete these bug reports?</div>
      <div class="btns"><input type="button" value="Delete" onclick="handleConfirm()" class="button"><input type="button" class="button" value="Cancel" onclick="handleCancel()"></div>
    </form>
  </div>
</div>

<div id="editsearches" style="display: none">
  <div class="hd">Edit Saved Searches</div>
  <div class="bd">
    <form id="editsearches_form">
<%
db.bugtracker.searches.find({user: user}).forEach(function(search){
    core.app.bugtracker.html.search_dlg_entry(search);
});
%>
    </form>
  </div>
</div>

<div id="editproject" style="display: none">
  <div class="hd">Edit Project</div>
  <div class="bd">
    <% core.app.bugtracker.project_edit(); %>
  </div>
</div>

<!-- End dialogs section -->


<!-- Begin bug table -->
<table>
  <tr valign="top">
    <td>
      <div id="bugJar">
      </div>
    </td>
    <td>
      <form><input type="button" value="Search" onclick="doSearch()"><input type="button" value="Clear" onclick="clearSearch()"></form>
    </td>
  </tr>
</table>
<!-- End bug table -->

<div id="assignDependency" style="background: white; border: 1px solid black; cursor: pointer">
<div class="hd">Change dependency</div>
<div class="bd" id="assignDependency_bd"></div>
</div>



<script type="text/javascript" src="/@@/yui/current/yuiloader/yuiloader-beta-min.js" ></script>
<script>


function deleteSearch(id) {
    document.getElementById("div_"+id).style.display="none";
    ajax("id="+id, "search_delete");
    document.getElementById("savedSearches").removeChild(document.getElementById("Search_"+id+"_name"));
}

var ok;
function rename(id) {
     var newName = document.getElementById("name_"+id).value;
     ajax("id="+id+"&name="+newName, "search_rename");
     ok = document.getElementById("ok_"+id);
     var o = .95;
     var delay = 50;
     ok.style.opacity = 1;
     while(o>0) {
          setTimeout("ok.style.opacity = "+o+";", delay);
          delay+=50;
          o-=.05;
     }
     setTimeout("ok.style.opacity = 0;", delay);
    document.getElementById("Search_"+id+"_name").innerHTML = newName;
}

lastSearch = "";

var l2 = {};
l2.owner = ["",
            <%
            var ownerCursor = db.users.find().toArray();
            for(var i=0; i<ownerCursor.length; i++)
                print("'"+ownerCursor[i].name+((i<ownerCursor.length-1) ? "'," : "'"));
            %>
           ] ;

l2.status = ["", <%
             for(var x in app.bugtracker.data.Feature.STATUS) {
                 print('"'+app.bugtracker.data.Feature.STATUS[x]+'",');
             }
             %>
            ];

l2.severity = ["", <% for(var x in app.bugtracker.data.Feature.SEVERITY) {
    print('"'+app.bugtracker.data.Feature.SEVERITY[x]+'",');
} %>];

l2.type = ["", <% for(var x in app.bugtracker.data.Feature.TYPE) {
                  print('"'+app.bugtracker.data.Feature.TYPE[x]+'",');
             } %>];

l2.project = ["", "none",
              <%
              var projCursor = db.bugtracker.projects.find().toArray();
              for(var i=0; i<projCursor.length; i++)
                   print("'"+projCursor[i].name+((i<projCursor.length-1) ? "'," : "'"));
              %> ];
l2.area = { <%
            var projCursor = db.bugtracker.projects.find().toArray();
            for(var i=0; i<projCursor.length; i++) {
                print('"'+projCursor[i].name+"\" : [\"\", \"none\",");
                 for(var j=0; j< projCursor[i].areas.length; j++) {
                      print("\""+projCursor[i].areas[j].name+"\",");
                 }
                 print("],");
            }
            %> };

function _createArea(project, areaname) {

     ajax("action=add&edproject="+project+"&newarea="+areaname, "project", function(response) {
          if(response == "") {
               alert("Area already exists for project.");
               return;
          }
         document.getElementById("massChangeL2").options[document.getElementById("massChangeL2").options.length] = new Option(response, response);
         document.getElementById("pickarea_sel").options[document.getElementById("pickarea_sel").options.length] = new Option(response, response);
         return;
     });
}

function getCheckedRows() {
     var i=0;
     var row = myDataTable.getTrEl(i);
     var passData = "";
     while(row) {
          if(myDataTable.getRecord(row).getData("check")) {
               passData += myDataTable.getRecord(row).getData("id")+",";
          }
          row = myDataTable.getNextTrEl(row);
          i++;
     }
     if(passData.length == 0) return "";
     return passData.substring(0, passData.length-1);
}

function setCheckedRows(b) {
     var row = myDataTable.getTrEl(0);
     while(row) {
         myDataTable.getRecord(row).setData("check", b);
         row = myDataTable.getNextTrEl(row);
     }
}


function clearOpts(el) {
    var opts = el.options;
    for(var x in opts) {
        opts[x].selected = false;
    }
}

function commitChanges() {
    // figure out the column to change, and to what
    var src = document.getElementById("massChangeL1").value;
    var dest = document.getElementById("massChangeL2").value;
    if(dest == "") return;

     var passData = "action=change&src="+src+"&dest="+dest+"&row=";

     // go through the table and find all selected rows
     var rows = getCheckedRows();
     if(rows.length == 0) {
          alert("You must select at least one case to change.");
          return;
     }
     passData += rows;

     if(src=="project") {
          document.getElementById("pickarea_div").style.display = "block";
          var project = dest;
          for(var i=0; i<l2.area[project].length; i++) {
               document.getElementById("pickarea_sel").options[i] = new Option(l2.area[project][i], l2.area[project][i]);
          }
          document.getElementById("newarea_div").style.display = "block";
     }
    else {
        clearOpts(document.getElementById("massChangeL1"));
        clearOpts(document.getElementById("massChangeL2"));
        // perform one big ajax call
        refreshTable(passData);
    }
}


function fillInForm(mapping) {
    var fields = YAHOO.util.Dom.getElementsByClassName("minisearch");
    for(var i=0; i<fields.length; i++) {
        if(mapping[fields[i].name]) {
            fields[i].value = mapping[fields[i].name];
        }
        else {
            fields[i].value = "";
        }
    }
}


function clearSearch() {
    var myarr = YAHOO.util.Dom.getElementsByClassName("minisearch");
    for(var i in myarr) {
        myarr[i].value="";
    }
    doSearch();
}

function doSearch() {
    var passData = getSearchArgs();
    lastSearch = passData;
    refreshTable();
}

function getSearchArgs() {
     var passData = "";
     var myarr = YAHOO.util.Dom.getElementsByClassName("minisearch");
     var dict = {};
     // FIXME:
     // This looks convoluted, but YUI inserts bonus accessibility fields
     // that get duplicate headers (i.e. input boxes) and so need to be
     // stripped out. I'd love to use whichever field was changed most
     // recently, but that's hard, and this hack is easy.
     // Overwrite earlier input fields with the values from later ones.

     for(var i=0; i<myarr.length; i++) {
          if(myarr[i].value != "") {
              dict[myarr[i].name] = myarr[i].value;
          }
     }
     var pairs = [];
     for(var key in dict){
         pairs.push(key+"="+dict[key]);
     }

     passData = pairs.join('&');
    return passData;
}

function refreshTable(passData){
    if(passData) passData = passData+"&";
    else passData = "";
    myDataSource.sendRequest(passData + "showClosed="+showClosed+"&"+lastSearch, updateCaseTable);
    YAHOO.util.Dom.getElementsByClassName("checkall")[1].checked = false;
}

function myNewBugs(name) {
    fillInForm({owner: name, status: "new"});
    doSearch();
};

var myDataTable, myDataSource, updateCaseTable;

function addForm(name, x) {
    return '<form onsubmit="doSearch(); return false;" class="inline"><input type="text" name="'+name+'" size="'+x+'" class="minisearch"></form>';
}

toggleCheckAll = function() {
    var act = YAHOO.util.Dom.getElementsByClassName("checkall")[1].checked ? true : false;
     var checks = document.getElementById("bugJar").getElementsByTagName("input");
     for(var i =0; i<checks.length; i++) {
         if(checks[i].type=="checkbox") {
               checks[i].checked = act;
         }
     }
    setCheckedRows(act);
}

assignDep = function(x, xDependsOn, type) {
    var passData="dep="+x+"&depOn="+xDependsOn+"&type="+type;
    ajax(passData, "setDep", function(response) {
        if(response == "-1") {
            alert("Oops, couldn't set the dependency!");
            return;
        }

        settingDep = false;
        assignDep_dlg.hide();
        myDataTable.unselectRow(dependency);

        refreshTable();
    });
}

var oMenu, checkAll = false;
var settingDep = false;
var dependency = null;
var rec = null;
var assignDep_dlg;

var loader = new YAHOO.util.YUILoader( {
     base: "/@@/yui/current/",
    require: ["datatable", "json", "container", "dragdrop"],
     loadOptional: true,
     onSuccess: function() {

         var myPaginator = new YAHOO.widget.Paginator({
             rowsPerPage: 30,
             alwaysVisible : false
         });

         confirmDlg = new YAHOO.widget.Dialog("confirm", {
             width: "400px",
             fixedcenter: true,
             modal: true,
             visible: false,
             draggable: true
         });
         confirmDlg.render(document.body);
         confirmDlg.callback = { success: handleConfirm };

          YAHOO.util.Event.onContentReady("editsearches", function () {
               oMenu = new YAHOO.widget.Panel("editsearches", {width: "400px", visible: false, fixedcenter: true});
               oMenu.render();
          });

         YAHOO.util.Event.onContentReady("editproject", function() {
             projEditPanel = new YAHOO.widget.Panel("editproject", {width: "400px", visible: false, fixedcenter: true});
             projEditPanel.render();
         });

         // FIXME: ha ha ha
         // Firefox saves partially completed forms, leading to weird results like reloading the page
         // doesn't reload the values of the "rename" text fields in the "edit saved searches"
         // dialog. Additionally, if you delete an entry from the middle, sometimes Firefox will
         // get confused on subsequent reloads and show old names on the wrong forms.
         // The best part about this all is that if you look at the elements in Firebug,
         // they have the right "value" attributes! But somehow the values are all wrong!
         // Because: Firefox is setting the value of these nodes in JS after the page is rendered.
         //
         // THIS IS INFURIATING.
         //
         // Fortunately the html ("correct") values are stored somewhere (the defaultValue property)
         // so we just force those fields to be correct after the page is loaded. THAT WILL SHOW THEM.
         var defaultAry = YAHOO.util.Dom.getElementsByClassName("useDefault");
         for(var i = 0; i < defaultAry.length; i++){
             defaultAry[i].value = defaultAry[i].defaultValue;
         }

         var counter = 0;

         var myColumnDefs = [
             {label: "", children: [{label: '<input type="checkbox" class="checkall" onclick="toggleCheckAll()">', key: "check", formatter: "checkbox" }]},
             {label: addForm("number", 3), children: [ {key: "number", label: "ID", sortable:true}]},
             {label: addForm("title"), children: [{ key: "title", label: "Name", sortable:true }]},
             {label: addForm("owner"), children: [{ key: "owner", label: "Owner", sortable:true }]},
             {label: addForm("status", 3), children: [{ key: "status", label: "Status", sortable:true }]},
             {label: addForm("severity", 3), children: [{ key: "severity", label: "Severity", sortable: true}]},
             {label: addForm("type",3), children: [{ key: "type", label: "Type", sortable:true }]},
             {label: addForm("project",3), children: [{ key: "project", label: "Project", sortable:true }]},
             {label: addForm("area", 3), children: [{ key: "area", label: "Area", sortable:true }]},
             {label: addForm("reporter", 4), children: [{ key: "reporter", label: "Author", sortable:true }]},
             {label: "", children: [{ key: "dependency", label: "Dependency", sortable:true, formatter:"myCustom"}]}
         ];

         var dbURL = "case_table?";
         var startSearch = dbURL +"showClosed=" + <%= request.showClosed %>;
         <%
         if(request.search){
             var args = request.search.split('&');
             var mapping = {};
             for(var i = 0; i < args.length; i++){
                 var pair = args[i].split('=');
                 mapping[pair[0]] = (pair[1]);
             }
         %>
         var mapping = <%= tojson(mapping) %>;
         lastSearch = getSearchArgs();
         var pairs = [];
         for(var i in mapping){
             pairs.push(i+'='+mapping[i]);
         }
             startSearch = startSearch+pairs.join('&');
         <%
         }
         %>

         myDataSource = new YAHOO.util.DataSource(startSearch);
         myDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
         myDataSource.connXhrMode = "queueRequests";
         myDataSource.responseSchema = {
             resultsList: "rows",
             fields: [ {key:"number", parser:YAHOO.util.DataSource.parseNumber}, "title", "owner", "status", "severity", "type", "project", "area", "reporter", "id", "dependency" ]
         };
         var oConfigs = {
             paginator: myPaginator,
             initialRequest:"",
             sortedBy:{key:"number",dir:YAHOO.widget.DataTable.CLASS_DESC}
         };

         myDataTable = new YAHOO.widget.DataTable("bugJar", myColumnDefs, myDataSource, oConfigs);



         YAHOO.widget.DataTable.Formatter.myCustom = function(elCell, oRecord, oColumn, oData) {
             var dep = oRecord.getData("dependency");
             elCell.innerHTML="";
             for(var d in dep) {
                 d2 = parseInt(d);
                 switch(dep[d]) {
                 case "1":
                     elCell.innerHTML+="<div>Depends on #"+d2+"</div>";
                     break;
                 case "2":
                     elCell.innerHTML+="<div>Refers to #"+d2+"</div>";
                     break;
                 case "3":
                     elCell.innerHTML+="<div>Duplicates #"+d2+"</div>";
                     break;
                 case "4":
                     elCell.innerHTML+="<div>Is blocked by #"+d2+"</div>";
                     break;
                 default: // "0" or ?
                     elCell.innerHTML+="";
                 }
             }
         };

         myDataTable.onEventSelectCell = function(e) {
             if(YAHOO.util.Dom.getFirstChild(YAHOO.util.Dom.getAncestorByTagName(e.target, "tr")) == e.target)
                 return;

             if(YAHOO.util.Dom.getLastChild(YAHOO.util.Dom.getAncestorByTagName(e.target, "tr")) == e.target) {
                 // if this is a first click, highlight the row
                 if(settingDep == false) {
                     //YAHOO.util.Dom.getAncestorByTagName(e.target, "tr").style.background = "#AACCAA";
                     myDataTable.selectRow(YAHOO.util.Dom.getAncestorByTagName(e.target, "tr"));
                     rec = myDataTable.getRecord(myDataTable.getTrEl(e.target));
                     dependency = myDataTable.getTrEl(e.target);
                     settingDep = true;
                     return;
                 }
                 // otherwise, unhighlight the row
                 else {

                     var recDependsOn = myDataTable.getRecord(YAHOO.util.Dom.getAncestorByTagName(e.target, "tr"));
                     if(rec.getData("id") == recDependsOn.getData("id")) {
                         myDataTable.unselectRow(YAHOO.util.Dom.getAncestorByTagName(e.target, "tr"));
                         settingDep = false;
                         return;
                     }

                     // z depends on w
                     var z = rec.getData("number");
                     var w = recDependsOn.getData("number");

                     document.getElementById("assignDependency_bd").innerHTML = "";

                     var dep = [" depends on ", " refers to ", " duplicates ", " is blocked by "];
                     var dep_div = document.getElementById("assignDependency_bd");

                     var depOpt = document.createElement("div");
                     depOpt.setAttribute("onclick", "assignDep('"+rec.getData("number")+"','"+recDependsOn.getData("number")+"',0)");
                     depOpt.innerHTML = '<input type="radio" name="dep" />No dependency';
                     dep_div.appendChild(depOpt);
                     var j=1;
                     for(var i in dep) {
                         depOpt = document.createElement("div");
                         depOpt.innerHTML = '<input type="radio" name="dep" />'+z+dep[i]+w;
                         if(rec.getData('dependency') && rec.getData("dependency")[recDependsOn.getData("number")]
                            && rec.getData("dependency")[recDependsOn.getData("number")] == (parseInt(i)+1)) {
                             depOpt.style.fontWeight = "bold";
                         }
                         depOpt.setAttribute("onclick", "assignDep('"+rec.getData("number")+"','"+recDependsOn.getData("number")+"',"+j+")");
                         dep_div.appendChild(depOpt);
                         j++;
                     }


                     // pop up a select to determine dependency type
                     var posx = 0;
                     var posy = 0;
                     if (e.event.pageX || e.event.pageY) {
                         posx = e.event.pageX;
                         posy = e.event.pageY;
                     }
                     else if (e.event.clientX || e.event.clientY) {
                         posx = e.event.clientX + document.body.scrollLeft
                         + document.documentElement.scrollLeft;
                         posy = e.event.clientY + document.body.scrollTop
                         + document.documentElement.scrollTop;
                     }
                     assignDep_dlg.show();

                     // link cases onchange
                     return;
                 }
             }

             location="case_edit?id="+myDataTable.getRecord(myDataTable.getTrEl(e.target)).getData("id") +"&search="+escape(lastSearch)+"&page="+myDataTable.get('paginator').getCurrentPage() + "&showClosed=" + showClosed;
          }

         assignDep_dlg = new YAHOO.widget.Dialog("assignDependency", { fixedcenter: true,
                                                                       visible: false,
                                                                       width: "300px" } );
         assignDep_dlg.render();

         myDataTable.subscribe("cellMouseoverEvent", myDataTable.onEventHighlightRow);
         myDataTable.subscribe("cellMouseoutEvent", myDataTable.onEventUnhighlightRow);
         myDataTable.subscribe("cellClickEvent", myDataTable.onEventSelectCell);

          myDataTable.subscribe("checkboxClickEvent", function(oArgs){
              var oRecord = this.getRecord(YAHOO.util.Dom.getAncestorByTagName(oArgs.target, "tr"));
              oRecord.setData("check",oArgs.target.checked);

              checkAlls = YAHOO.util.Dom.getElementsByClassName("checkall");
              if(oArgs.target.checked == false) {
                  checkAlls[1].checked = false;
              }
          });

         myDataSource.liveData = "case_table?";

         <% if(request.search){ %>
         fillInForm(mapping);
         <% } %>

          updateCaseTable = {
              success : function(){ myDataTable.onDataReturnInitializeTable.apply(myDataTable, arguments); myPaginator.setTotalRecords(myDataTable.getRecordSet().getLength()); },
               failure : myDataTable.onDataReturnInitializeTable,
               scope : myDataTable
          };

          /* Toolbox */
/*          document.getElementById("toolbox").style.display = "block";
          myPanel=new YAHOO.widget.Panel("toolbox", {visible:true, constraintoviewport:true, draggable:true, context:["wholething","br","br"],
                                                    close: false});
          myPanel.setHeader("Toolbox");
          myPanel.render();*/
     }
});

loader.insert();


</script>

</div>
<div id="wholething">
</div>
</body>
