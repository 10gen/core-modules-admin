<%
core.content.table();
core.content.html();
core.user.user();
core.user.auth();
core.app.bugtracker.data.feature();
core.net.url();
core.io.encode.javascript();

head.push("<script src=\"/~~/ui/js/common.js\"></script>");
head.push('<link rel="stylesheet" type="text/css" href="/@@/yui/current/menu/assets/skins/sam/menu.css">');
head.push("<link rel=\"stylesheet\" href='assets/bugtracker.css' type=\"text/css\"/>");
%>


<html>
    <head>
        <title>Cases List</title>
        <script type="text/javascript" src="/@@/yui/current/yahoo-dom-event/yahoo-dom-event.js"></script>
        <script type="text/javascript" src="/@@/yui/current/container/container_core.js"></script>
        <script type="text/javascript" src="/@@/yui/current/menu/menu.js"></script>
        <script type="text/javascript" src="assets/menu.js"></script>
    </head>
<body class="yui-skin-sam">
        <div id="top_menu" class="yuimenubar">
            <div class="bd">
                <ul class="first-of-type">
                    <li class="yuimenubaritem first-of-type"><a href="case_edit">New case</a></li>
                    <li class="yuimenubaritem first-of-type"><a href="<%= new URL(request.getURL()).addArg("owner", user.name).addArg("status", "new")%>">My new bugs</a></li>
                    <li class="yuimenubaritem first-of-type"><a href="project_edit">Edit a project</a></li>
                </ul>
            </div>
        </div>

        <div id="yui-main">

    <% if(request.msg){ %>
        <div class="notice"><%= content.HTML.escape_html(request.msg) %>
    <% } %>

<div id="toolbox" style="visibility:hidden">
<input id="show_closed" type="checkbox" onclick="toggleClosed()" checked>Show Closed
<fieldset><legend>Edit Selected</legend>
<div class="field"><input type="button" onclick="deleteSelected()" value="Delete"></div>
<div class="field">Change <select onchange="fillLevel2()" id="massChangeL1" name="massChangeL1">
<option value="">&nbsp;</option>
<option value="owner">Owner</option>
<option value="status">Status</option>
<option value="severity">Severity</option>
<option value="type">Type</option>
<option value="project">Project</option>
<option value="area">Area</option>
</select> to <select onchange="commitChanges()" id="massChangeL2" name="massChangeL2" disabled>
</select>
</div>
<div class="field" id="newarea_div" style="display: none;"><input type="text" id="newarea_input"><input type="button" value="Create New Area" onclick="createArea()"></div>
</fieldset>

  <fieldset class="dlg"><legend>Save this search</legend>
    <form id="saveSearchForm" action="search_save">
      <input type="hidden" name="searchArgs" value="<%= request.getHeader('Referer') %>">
      <div class="field"><label>Search name</label> <input type="text" name="name" class="text" id="saveSearchName">
      <input type="button" value="Search" onclick="handleSaveSearch()" class="button">
      </div>
<div class="field"><select onchange="doSavedSearch()" id="savedSearches" size="5">
    <% db.bugtracker.searches.find({user: user}).forEach(function(search){
        core.app.bugtracker.html.search(search, request.getURL());
    }); %>
</select>
    </form>
</fieldset>
</div>

<div id="bugJar">
</div>

<div id="newCase">

</div>


<script type="text/javascript" src="/@@/yui/current/yuiloader/yuiloader-beta-min.js" ></script>
<script>

var l2 = {};
l2.owner = ["",
     <%
     var ownerCursor = db.users.find().toArray();
     for(var i=0; i<ownerCursor.length; i++)
          print("'"+ownerCursor[i].name+((i<ownerCursor.length-1) ? "'," : "'"));
     %>
           ] ;

l2.status = ["", <% for(var x in app.bugtracker.data.Feature.STATUS) {
                  print('"'+app.bugtracker.data.Feature.STATUS[x]+'",');
             } %>];

l2.severity = ["", <% for(var x in app.bugtracker.data.Feature.SEVERITY) {
                  print('"'+app.bugtracker.data.Feature.SEVERITY[x]+'",');
             } %>];

l2.type = ["", <% for(var x in app.bugtracker.data.Feature.TYPE) {
                  print('"'+app.bugtracker.data.Feature.TYPE[x]+'",');
             } %>];

l2.project = ["", "none",
              <%
              var projCursor = db.bugtracker.projects.find().toArray();
              for(var i=0; i<projCursor.length; i++)
                   print("'"+projCursor[i].name+((i<projCursor.length-1) ? "'," : "'"));
              %> ];
l2.area = { <%
            var projCursor = db.bugtracker.projects.find().toArray();
            for(var i=0; i<projCursor.length; i++) {
                 print('"'+projCursor[i].name+"\" : [");
                 for(var j=0; j< projCursor[i].areas.length; j++) {
                      print("\""+projCursor[i].areas[j].name+"\",");
                 }
                 print("],");
            }
            %> };

function deleteSelected() {
     var rows = getCheckedRows();
     if(rows == "") {
          alert("You must select at least one case to delete.");
          return;
     }

     var passData = "action=delete&row="+rows;
     var updateCaseTable = {
          success : myDataTable.onDataReturnReplaceRows,
          failure : myDataTable.onDataReturnReplaceRows,
          scope : myDataTable
     };

     // perform one big ajax call
     myDataSource.sendRequest(passData, updateCaseTable);
}

function getProject() {
     var i=0;
     var row = myDataTable.getTrEl(i);
     var project = "";
     while(row) {
          if(myDataTable.getRecord(row).getData("check")) {
               if(project == "")
                    project = myDataTable.getRecord(row).getData("project");
               else if(project != myDataTable.getRecord(row).getData("project") || project == "none") {
                    alert("Areas are specific to projects.  All selected cases must have the same project in order to change the area.");
                    return;
               }
          }
          row = myDataTable.getNextTrEl(row);
          i++;
     }
     return project;
}

function fillLevel2Area() {
     var project = getProject();
     // what should actually be done is that the area option should be disabled unless at least one checkbox is checked
     if(project.length == 0) {
          alert("You must select at least one case to change areas.");
          return;
     }

     // if we made it here, there is at least one checkbox selected and all selected checkboxes have the same project listed
     // so, now we find the areas based on project
     for(var i=0; i<l2.area[project].length; i++) {
          document.getElementById("massChangeL2").options[i] = new Option(l2.area[project][i], l2.area[project][i]);
     }

     // also, show the "create new area" div
     document.getElementById("newarea_div").style.display = "block";

}

function createArea() {
     var newarea = document.getElementById("newarea_input").value;
     if(newarea == "") {
          alert("You must enter a name for the new area.");
          return;
     }
     var project = getProject();
     // what should actually be done is that the area option should be disabled unless at least one checkbox is checked
     if(project.length == 0) {
          alert("You must select at least one case to change areas.");
          return;
     }

     ajax("project="+project+"&area="+newarea, "area_add.jxp", function(response) {
          if(response == "") {
               alert("Area already exists for project.");
               return;
          }
          document.getElementById("massChangeL2").options[document.getElementById("massChangeL2").options.length] = new Option(response, response);
     });
}


function fillLevel2() {
     document.getElementById("massChangeL2").options.length = 0;
     l1 = document.getElementById("massChangeL1").value;
     if(l1 == "") {
          document.getElementById("massChangeL2").disabled = true;
          return;
     }
     document.getElementById("massChangeL2").disabled = false;
     if(l1 == "area")
          fillLevel2Area();
     else
          document.getElementById("newarea_div").style.display = "none";

     for(var i=0; i<l2[l1].length; i++) {
          document.getElementById("massChangeL2").options[i] = new Option(l2[l1][i], l2[l1][i]);
     }
}

function getCheckedRows() {
     var i=0;
     var row = myDataTable.getTrEl(i);
     var passData = "";
     while(row) {
          if(myDataTable.getRecord(row).getData("check")) {
               passData += myDataTable.getRecord(row).getData("id")+",";
          }
          row = myDataTable.getNextTrEl(row);
          i++;
     }
     if(passData.length == 0) return "";
     return passData.substring(0, passData.length-1);
}


function commitChanges() {
     var passData = "";

    // figure out the column to change, and to what
     var src = document.getElementById("massChangeL1").value;
     var dest = document.getElementById("massChangeL2").value;
     passData = "action=change&src="+src+"&dest="+dest+"&row=";

     // go through the table and find all selected rows
     var rows = getCheckedRows();
     if(rows.length == 0) {
          alert("You must select at least one case to change.");
          return;
     }
     passData += rows;

     // perform one big ajax call
     myDataSource.sendRequest(passData, updateCaseTable);
}

function toggleClosed() {
     var disp = (document.getElementById("show_closed").checked) ? "table-row" : "none";

     var row = myDataTable.getTrEl(0);
     while(row) {
          if(myDataTable.getRecord(row).getData("status") == "closed") {
               row.style.display = disp;
          }
          row = myDataTable.getNextTrEl(row);
     }
}

function doSavedSearch() {
     var passData = "action=search&"+document.getElementById("savedSearch").value;
     myDataSource.sendRequest(passData, updateCaseTable);
}

function doSearch() {
     var passData = "";
     var myarr = YAHOO.util.Dom.getElementsByClassName("minisearch");
     for(var i=0; i<myarr.length; i++) {
          if(myarr[i].value != "") {
               passData += "&"+myarr[i].name+"="+myarr[i].value;
          }
     }
     // If there are no search queries, don't bother
     if(passData == "")
          return;

     var passData = "action=search"+passData;

     // perform one big ajax call
     myDataSource.sendRequest(passData, updateCaseTable);
}

var myDataTable, myDataSource, updateCaseTable;

function addForm(name, x) {
     return '<form><input type="text" name="'+name+'" size="'+x+'" class="minisearch"><input type="submit" name="action" value="?"></form>';
}

handleSaveSearch = function(name){
     <%
     searchOpts = Object.extend({}, request); delete searchOpts["action"];
     noSearchOpts = new URL(request.getURL()); noSearchOpts.args = [{key: "action", value: "?"}];
        %>
     var u = <%= io.Encode.JSON(Util.format_queryargs(searchOpts)) %>;
     var name = document.getElementById("saveSearchName").value;
     ajax(u+"&name="+name+"&link=<%= noSearchOpts.toString() %>", "search_save", function(response) {
         document.getElementById("savedSearches").innerHTML += response;
     });
};


var loader = new YAHOO.util.YUILoader( {
     base: "/@@/yui/current/",
     require: ["datatable", "json", "container", "dragdrop"],
     loadOptional: true,
     onSuccess: function() {
          var myColumnDefs = [
               {label: '<form><input type="button" value="Search" onclick="doSearch()"></form>', children: [{label: "", key: "check", formatter: "checkbox" }]},
               {label: addForm("number", 3), children: [ {key: "number", label: "ID", sortable:true}]},
               {label: addForm("title"), children: [{ key: "title", label: "Name", sortable:true }]},
               {label: addForm("owner"), children: [{ key: "owner", label: "Owner", sortable:true }]},
               {label: addForm("status", 3), children: [{ key: "status", label: "Status", sortable:true }]},
               {label: addForm("severity", 3), children: [{ key: "severity", label: "Severity", sortable: true}]},
               {label: addForm("type",3), children: [{ key: "type", label: "Type", sortable:true }]},
               {label: addForm("project",3), children: [{ key: "project", label: "Project", sortable:true }]},
               {label: addForm("area", 3), children: [{ key: "area", label: "Area", sortable:true }]}
          ];

          <%
          dsOpts = Util.format_queryargs(request);
          log(dsOpts);
          %>

          myDataSource = new YAHOO.util.DataSource("case_table?<%= dsOpts %>");
          myDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
          myDataSource.connXhrMode = "queueRequests";
          myDataSource.responseSchema = {
               resultsList: "rows",
               fields: [ {key:"number", parser:YAHOO.util.DataSource.parseNumber}, "title", "owner", "status", "severity", "type", "project", "area", "id" ]
          };
          var oConfigs = {
               paginator: new YAHOO.widget.Paginator({
                    rowsPerPage: 10
               }),

                // Show over 500 records
               initialRequest:"",
               sortedBy:{key:"number",dir:YAHOO.widget.DataTable.CLASS_DESC}
          };
          myDataTable = new YAHOO.widget.DataTable("bugJar", myColumnDefs, myDataSource, oConfigs);

          myDataTable.onEventSelectCell = function(e) {
               if(YAHOO.util.Dom.getFirstChild(YAHOO.util.Dom.getAncestorByTagName(e.target, "tr")) == e.target)
                    return;

               location="case_edit?id="+myDataTable.getRecord(myDataTable.getTrEl(e.target)).getData("id");
          }

          myDataTable.subscribe("cellMouseoverEvent", myDataTable.onEventHighlightRow);
          myDataTable.subscribe("cellMouseoutEvent", myDataTable.onEventUnhighlightRow);
          myDataTable.subscribe("cellClickEvent", myDataTable.onEventSelectCell);

          myDataTable.subscribe("checkboxClickEvent", function(oArgs){
               var oRecord = this.getRecord(YAHOO.util.Dom.getAncestorByTagName(oArgs.target, "tr"));
               oRecord.setData("check",oArgs.target.checked);
          });
          updateCaseTable = {
               success : myDataTable.onDataReturnReplaceRows,
               failure : myDataTable.onDataReturnReplaceRows,
               scope : myDataTable
          };

          /* Toolbox */
          myPanel=new YAHOO.widget.Panel("toolbox", {visible:true, constraintoviewport:true, draggable:true, context:["yui-main","br","br"] });
          myPanel.setHeader("Toolbox");
          myPanel.render();
     }
});

loader.insert();


</script>

</div>
</body>
