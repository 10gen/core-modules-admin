<%

core.ext.pluck();
core.io.marshal();
core.io.encode.json();
core.app.bugtracker.data.feature();


var liveDataCursor, query;

// This will keep track of the "leftover" arguments, to be used in search.
var req = Object.extend({}, request);

var queryForms = {
    owner: function(name) {
        // Search insensitively on the username. If we don't find one,
        // just return some value that should never occur.
        var user = db.users.findOne({name: name});
        if(user) return user;
        return -1;
    },
    project: function(u) {
        var proj = db.bugtracker.projects.findOne({name: u});
        if(proj) return proj;
        return -1;
    },
    reporter: function(u) {
        var user = db.users.findOne({name: u});
        if(user) return user;
        return -1;
    }
};

if(request.action == "change") {
    var cases = request.row.split(",");
    var cat = request.src;
    var subcat = request.dest;
    for(var x in cases) {
        var c = db.bugtracker.cases.findOne( { _id: cases[x] } );

        // Sooooo bad
        if(cat == "owner") {
            c.owner = db.users.findOne({ name: subcat } );
        }
        else if(cat == "project") {
            c.project = db.bugtracker.projects.findOne({ name: subcat});
            if(request.newarea == "none")
                c.area = "";
            else if(request.newarea)
                c.area = request.newarea;
        }
        else
            c[cat] = subcat;

        db.bugtracker.cases.save(c);
        delete req.newarea;
        fork(core.app.bugtracker.email_send, request, user, c, false).start();
    }
    delete req.dest; delete req.src; delete req.row; delete req.area;
}
else if(request.action == "delete") {
     var cases = request.row.split(",");
     for(var x in cases)
          db.bugtracker.cases.remove( { _id: cases[x] } );
    delete req.row;
}

var showClosed = (request.showClosed == "false") ? false : true;

// Search across all leftover fields
var searchobj = {};
var tempLive;
for(var q in req) {
    if(q == "action" || q == "showClosed")
        continue;
    if(req[q] == "none")
        query = null;
    else {
        query = new RegExp("(.*)"+req[q]+"(.*)", "i");
        if(queryForms[q]) query = queryForms[q](query);
    }
    searchobj[q] = query;
}

liveDataCursor = db.bugtracker.cases.find(searchobj).sort({number: 1}).toArray();

if(!showClosed) {
     liveDataCursor = liveDataCursor.filter(function(x) {
          if(x.status == "closed")
               return false;
          return true;
     });
}


print(tojson_u({rows: io.Marshal(liveDataCursor, {id: "_id",
                                                  number: true,
                                                  title: true, owner: function(p){ return p? p.name: "none"},
                                                  status: true, severity: true, type: true,
                                                  project: function(p){ return p? p.name: "none"},
                                                  area: true,
                                                  reporter: function(p) { return p? p.name: "none"},
                                                  dependency: true,
                                                  dependencyType: true,
                                                  targetRelease: true
                                                 }
                                )
               }
              )
     );
%>

