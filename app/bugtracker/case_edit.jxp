<%
core.app.bugtracker.data.feature();
core.app.bugtracker.data.project();
core.app.bugtracker.data.helper();
core.user.user();
core.user.auth();
core.net.url();
core.content.forms();
core.ext.stringcompare();
if (! user ){
    user = Auth.getUser(request);
}
if (! user ){
    return Auth.reject(request, response);
}
var feature = null;
if ( request.id ){
    feature = db.bugtracker.cases.findOne( { _id : request.id } );
}
else{
    feature = new app.bugtracker.data.Feature();
    feature.reporter = user;
}

if (request.action == "Delete"){
    db.bugtracker.cases.remove(feature);
    response.setResponseCode(301);
    response.setHeader("Location", "./");
    return;
}

var postTarget = new URL(request.getURL());

feature.number = parseInt(feature.number).toFixed();
timestamp = feature.lastModified;
Forms.fillInObject( "f", feature );
head.push("<link rel=\"stylesheet\" href='assets/bugtracker.css' type=\"text/css\"/>");
head.push("<link rel=\"stylesheet\" href='assets/threaded.css' type=\"text/css\"/>");
if(feature.project == "null") feature.project = null;
else if(typeof feature.project == "string") {
    feature.project = db.bugtracker.projects.findOne({_id: feature.project});
}

var error = "";

// We use fstatus as a generic "user has submitted form" check.
if(request.fstatus && request.ftitle == ""){
    error = "A bug report must have a title!";
}
else if(request.fstatus){
     var targetRel = request.ftargetrelease;
     if(targetRel == "newRel") {
          db.bugtracker.releases.save({text: request.extra_ftargetrelease });
          targetRel = request.extra_ftargetrelease;
     }
     feature.targetRelease = targetRel;

    if(typeof feature.project == "string") {
        feature.project = db.bugtracker.projects.findOne({_id: feature.project});
    }
    if (feature.lastModified.toString() == request.starttime ||
        ! feature._id ){
        feature.lastModified = new Date();
        if(feature.owner == "null") feature.owner = null;
        else
            feature.owner = db.users.findOne({_id: feature.owner});
        var props = ["project", "OS", "release"];
        p = "project";
        if(feature.project == null){
            if(request["extra_fproject"]){
                feature.project = new app.bugtracker.data.Project(request["extra_fproject"]);
                db.bugtracker.projects.save(feature.project);
            }
        }

        if(feature.area == "New area"){
            feature.area = request["extra_farea"];
        }
        else if(feature.area == "None"){
            feature.area = "";
        }

        // FIXME: why did I write this to check for a new area every time,
        // rather than just checking if the form says "New area"? I have
        // no idea! But until I figure it out, I'm not gonna change it.
        if(feature.project && feature.area &&
           feature.project.areas.filter(function(area){return area.name == feature.area;}).length == 0){
            feature.project.areas.push(new app.bugtracker.data.Area(request["extra_farea"], null));
        }

        if(feature.number == 0)
            feature.number = app.bugtracker.data.Feature.nextNumber();

        feature_new = feature._id == null;

        db.bugtracker.cases.save(feature);

        if(mail){
            core.app.bugtracker.email_send(request, user, feature, feature_new);
            append = "";
        }
        else {
            append = "?msg=No+mail+sent";
        }

         // Redirect back to bugs/ or whatever
         if(request.action != "Save and Add Another") {
              response.setResponseCode(301);
             if(request.search && request.page)
                 var link = "./?search=" + escape(request.search) + "&page=" + request.page;
             else
                 var link = "./";
              response.setHeader("Location", link);
         }
        else {
            var oldfeature = feature;
            feature = new app.bugtracker.data.Feature();
            ["owner", "status", "severity", "type", "os",
             "project", "area", "release"].forEach(function(field){
                feature[field] = oldfeature[field];
            });
            feature.reporter = user;
            postTarget = postTarget.removeArg("id");
        }

    }
    else{
        timestamp = feature.lastModified;
        orig = db.bugtracker.cases.findOne( { _id: request.id } );
    }
}

title = "New Case";
if (feature.number > 0) title = "Case #" + feature.number;
print.setFormObject( feature, "f" );
%>
<html>
<head>
    <title><%= title %></title>
    <!-- <link rel="stylesheet" type="text/css" href="/@@/yui/current/reset-fonts-grids/reset-fonts-grids.css"> -->
    <link rel="stylesheet" type="text/css" href="/@@/yui/current/menu/assets/skins/sam/menu.css">
    <script type="text/javascript" src="/@@/yui/current/yahoo-dom-event/yahoo-dom-event.js"></script>
    <script type="text/javascript" src="/@@/yui/current/container/container_core.js"></script>
    <script type="text/javascript" src="/@@/yui/current/menu/menu.js"></script>
    <script type="text/javascript" src="assets/menu.js"></script>

    <script>
      function enableInput(input){
          var elems = document.getElementsByName(input);
          var select = elems[0];
          var input = document.getElementsByName("extra_"+input)[0];
          if(select.options[select.selectedIndex].text.indexOf("New ") == 0){
              input.disabled = false;
          }
          else{
              input.disabled = true;
          }
      }
function ObjectId(){ return null; }
      projects = <%=tojson(db.bugtracker.projects.find().toArray()) %>;
      function updateAreas(){
          var projsel = document.getElementsByName("fproject")[0];
          var areasel = document.getElementsByName("farea")[0];
          var areatext = document.getElementsByName("extra_farea")[0];
          var projname = projsel.options[projsel.selectedIndex].text;
          var options = null;
          for(var i in projects){
              if(projects[i].name == projname){
                  options = projects[i].areas;
                  break;
              }
          }
          areasel.options.length = 1;
          if(options){
              for (var i in options){
                  var option = options[i];
                  areasel.options[areasel.options.length] = new Option(option.name);
              }
          }
          if(projname != "None")
              areasel.options[areasel.options.length] = new Option("New area");
          //if(areasel.options.length == 1) areatext.disabled = false;
          //else
              //
          areatext.disabled = true;
      }

      function bodyLoad(){
          document.getElementById( "ftitle" ).focus();
      }
    </script>
  </head>
<body class="yui-skin-sam" onload="<%= request.id ? "" : "bodyLoad()" %>" >

    <div id="top_menu" class="yuimenubar">
        <div class="bd">
            <ul class="first-of-type">
                <li class="yuimenubaritem first-of-type"><a href="./">Case list</a></li>
            </ul>
        </div>
    </div>

    <div id="yui-main">
        <h1><%= title %></h1>

    <% if (orig) { %>
    <div id="original">
      <span class="errormsg">Someone edited this case in the meantime. Here's their version.</span>
      <ul>
        <li>Title: <%= orig.title%></li>
        <li>Owner: <%= orig.owner%></li>
        <li>Status: <%= orig.status%></li>
        <li>Severity: <%= orig.severity%></li>
        <li>Type: <%= orig.type %></li>
        <li>Project: <%= orig.project %></li>
        <li>Area: <%= orig.area %></li>
        <li>OS: <%= orig.OS %></li>
        <li>Target release: <%= orig.targetRelease%></li>
        <li>Description: <%= orig.description.replace(/\n/g, "<br/>")%></li>
      </ul>
      Here's your version:
    </div>
    <% }
      else if(error) { %>
    <span class="errormsg"><%= error %></span>

    <% } %>
    <form method="POST" action="<%= postTarget.toString() %>">
    <input type="hidden" name="f_id"/>
    <input type="hidden" name="starttime" value="<%= timestamp %>"/>
<input type="hidden" name="search" value="<%= request.search ? request.search : "" %>"/>
<input type="hidden" name="page" value="<%= request.page ? request.page : "" %>"/>
    <table>
        <tr>
            <td class="label case_title">Title</td>
            <td class="value case_title" colspan="3"><input size="50" id="ftitle" name="ftitle"/></td>
        </tr>
        <tr>
            <td class="label">Date reported</td>
            <td class="value"><%= feature.creationDate%></td>
            <td class="label">Last modified</td>
            <td class="value"><%= feature.lastModified%></td>
        </tr>
        <tr>
            <td class="label">Reporter</td>
            <td class="value"><%= feature.reporter.name %></td>
            <td class="label">Owner</td>
            <td class="value">
                  <% //This doesn't set the None user if feature.owner is null; that happens implicitly since None is first. %>
          <%= app.bugtracker.data.helper.select(feature, "owner", "f",
                                                [false].concat(db.users.find({}).toArray()),
                                                {view: function(u){return u?u.name:"None";},
                                                 value: function(u){return u?u._id:"null"; },
                                                }) %> </div>
        </tr>
        <tr>
            <td class="label">Status</td>
            <td class="value"><%= app.bugtracker.data.helper.select(feature, "status", "f") %></td>
            <td class="label">Severity</td>
            <td class="value"><%= app.bugtracker.data.helper.select(feature, "severity", "f") %></td>
        </tr>
        <tr>
            <td class="label">Type</td>
            <td class="value"><%= app.bugtracker.data.helper.select(feature, "type", "f") %></td>
            <td class="label">OS</td>
            <td class="value">
                   <% var choices = app.bugtracker.list_OSes();
                      if (choices) { %>
                   <%= app.bugtracker.data.helper.select(feature, "OS", "f", choices)%>
                              <% }
                      else { %>
                              <input name="fOS"/>
                              <% } %>
            </td>
        </tr>
        <tr>
            <td class="label">Project</td>
            <td class="value">
                <%
    var choices = app.bugtracker.app.list_projects().sort(function(x, y){ return Ext.stringCompare(x.name, y.name);});
                choices = [new app.bugtracker.data.Project("None")].concat(choices);
                var pchoices = choices.concat([new app.bugtracker.data.Project("New project")]);
                %>
                <%=
                app.bugtracker.data.helper.select(feature, "project", "f", pchoices,
                                                 {view: function(p){ return p.name; },
                                                  value: function(p){ return p._id; },
                                                  onchange: "enableInput('fproject');updateAreas();"})%>
                <input name="extra_fproject" <%=choices.length > 0? "disabled=\"true\"": "" %>/>
            </td>
            <td class="label">Area</td>
            <td class="value">
            <%
            var project = feature.project || choices[0];
var pchoices = [{name: "None"}].concat(project.areas.sort(function(x, y){ return Ext.stringCompare(x.name, y.name);}));
if(project.areas.length > 0){
    pchoices = pchoices.concat([{name: "New area"}]);
}
                       %>
            <%=
               app.bugtracker.data.helper.select(feature, "area", "f", pchoices,
                                                 { view: function(a) { return a.name; },
                                                   compare: function(a, orig) { return a.name == orig; },
                                                     onchange: "enableInput('farea')"})%>
            <input name="extra_farea" <%=choices.length > 0? "disabled=\"true\"": "" %> />
          </td>
        </tr>
        <tr>
            <td class="label">Target Release</td>
<td class="value" colspan="3"><select name="ftargetrelease" onchange="enableInput('ftargetrelease')"><option value="none">None</option>
<% var rels = db.bugtracker.releases.find().toArray();
print(rels.map(function(p) { return '<option value="'+p._id+'">'+p.text+"</option>" }).join(","));
%>
<option value="newRel">New Release</option>
</select>
<input name="extra_ftargetrelease" disabled/></td>
        </tr>
        <tr><td colspan="4" class="section_divider"><hr /></td></tr>
        <tr>
            <td class="label description">Description</td>
            <td class="value" colspan="3"><textarea cols=80 rows=20 name="fdescription"><%= feature.description %></textarea></td>
        </tr>
        <tr>
            <td class="label">&nbsp;</td>
            <td class="value" colspan="3">
                <input name="action" type="submit" value="Save">
<input name="action" type="submit" value="Save and Add Another">
                <input type="submit" name="action" value="Delete" onclick="return confirm('Are you sure you want to delete this item?');" <%= request.id == null? "disabled=\"true\"" : ""%> >
            </td>
        </tr>
        <tr><td colspan="4" class="section_divider"><hr /></td></tr>
    </table>
    </form>
    <div class="comments">
        <h1>Comments</h1>
        <div>
            <%
            if(feature.decoratorsHandle()) {
                feature.lastModified = new Date();
                db.bugtracker.cases.save(feature);
            }
            %>
        </div>
        <%
        feature.decoratorsRender("threaded.replylink");
        feature.decoratorsRender("threaded.replyform");
        feature.decoratorsRender("threaded.replies");
        %>
    </div>
</div>

  </body>
</html>
<%

%>
